*1
$5
MULTI
*2
$6
SELECT
$1
0
*3
$3
SET
$30
demo_user:teacher:local:shared
$173
{"question": [], "options": [], "answer": [], "explanation": [], "subject": [], "wrong_question": [], "weak_type": [], "notes": [], "user_answer": [], "retrieve_answer": ""}
*3
$9
PEXPIREAT
$30
demo_user:teacher:local:shared
$13
1755876540635
*1
$4
EXEC
*1
$5
MULTI
*3
$3
SET
$30
demo_user:teacher:local:shared
$173
{"question": [], "options": [], "answer": [], "explanation": [], "subject": [], "wrong_question": [], "weak_type": [], "notes": [], "user_answer": [], "retrieve_answer": ""}
*3
$9
PEXPIREAT
$30
demo_user:teacher:local:shared
$13
1755877308135
*1
$4
EXEC
*1
$5
MULTI
*3
$3
SET
$30
demo_user:teacher:local:shared
$173
{"question": [], "options": [], "answer": [], "explanation": [], "subject": [], "wrong_question": [], "weak_type": [], "notes": [], "user_answer": [], "retrieve_answer": ""}
*3
$9
PEXPIREAT
$30
demo_user:teacher:local:shared
$13
1755877977346
*1
$4
EXEC
*1
$5
MULTI
*3
$3
SET
$30
demo_user:teacher:local:shared
$7733
{"question": ["소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기능은?", "데이터베이스 설계 단계 중 저장 레코드 양식 설계, 레코드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은?", "릴레이션의 차수가 4이고 카디널리티가 5이며, 릴레이션 S의 차수가 6이고 카디널리티가 7일 때 두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이션의 차수와 카디널리티는 얼마인가?", "운영체제의 종류에는 Windows, UNIX, Linux 등이 있습니다. 다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은?", "시스템 소프트웨어의 종류에는 운영체제, 언어 번역 프로그램, 매크로 프로세서, 링커, 라이브러리 등이 있습니다. 다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것으로, 소프트웨어 개발 전 과정에 지속적으로 작용할 수 있는 방법, 절차, 기법 등을 의미하는 것은?", "정보공학 방법론에서 데이터베이스 설계의 표현으로 사용하는 모델링 언어는?"], "options": [["  1. 정적 구조", "  2. 동적 행위", "  3. 시스템 구조", "  4. 요구사항 분석"], ["  1. 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "  2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "  3. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "  4. 단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["  1. 요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "  2. 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "  3. 구조적 분석, 구조적 설계, 구현, 테스트", "  4. 구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["  1. 정의 단계", "  2. 개발 단계", "  3. 유지보수 단계", "  4. 설계 단계"], ["  1. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "  2. 모형의 적용 경험과 성공 사례가 많다.", "  3. 단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "  4. 각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["  1. 노드와 간선으로 구성된다.", "  2. 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "  3. 계층 모델이라고도 한다.", "  4. 3개의 서브시스템(모델, 뷰, 제어)으로 구성되어 있다."], ["  1. 데이터 조회", "  2. 데이터 조작", "  3. 데이터베이스 구조 정의", "  4. 데이터 보안"], ["  1. 요구 조건 분석", "  2. 개념적 설계", "  3. 논리적 설계", "  4. 물리적 설계"], ["  1. 10, 35", "  2. 24, 35", "  3. 10, 12", "  4. 24, 12"], ["  1. 다중 프로그래밍을 지원한다", "  2. 사용자 인터페이스를 제공한다", "  3. 하드웨어를 직접 제어한다", "  4. 컴퓨터의 자원을 효율적으로 관리한다"], ["  1. 제어 프로그램", "  2. 처리 프로그램", "  3. 응용 프로그램", "  4. 유틸리티 프로그램"], ["  1. 고속 ․ 고품질의 통신 서비스 제공", "  2. 고성능의 에러 제어 방식을 사용하여 시스템 신뢰도가 높음", "  3. 대형 컴퓨터의 공동 이용", "  4. 단거리 전송만 지원"], ["  1. 각 단계가 끝난 후 결과물이 명확히 나와야 함", "  2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어려움", "  3. 단계별 정의가 분명하고, 전체 공조의 이해가 용이", "  4. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["  1. 소프트웨어 공학", "  2. 정보공학 방법론", "  3. 구조적 방법론", "  4. 시스템 개발"], ["  1. Package Diagram", "  2. State Transition Diagram", "  3. Deployment Diagram", "  4. Entity-Relationship Diagram"]], "answer": ["2", "1", "2", "3", "1", "2", "3", "3", "1", "3", "3", "4", "4", "1", "4"], "explanation": ["소프트웨어 아키텍처는 구성 요소들의 상호작용 및 관계, 각각의 특성을 정의합니다.", "폭포수 모형은 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없는 선형 순차적 모형입니다.", "구조적 방법론은 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍 단계로 구성됩니다.", "유지보수 단계는 소프트웨어를 직접 운용하며, 변경에 초점을 두고 여러 환경 변화에 따라 소프트웨어를 적응 및 유지시키는 단계로, 소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계입니다.", "폭포수 모형의 단점 중 하나는 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다는 것입니다.", "파이프 필터 형태의 소프트웨어 아키텍처는 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복하는 형태입니다.", "DDL은 데이터베이스의 구조를 정의, 변경, 삭제하는 데 사용되는 언어입니다.", "논리적 설계 단계에서는 저장 레코드 양식 설계, 레코드 집중의 분석 및 설계 접근 경로 설계 등이 포함됩니다.", "카티션 프로덕트의 결과로 생성되는 릴레이션의 차수는 두 릴레이션의 차수의 합이고, 카디널리티는 두 릴레이션의 카디널리티의 곱입니다.", "운영체제는 하드웨어를 직접 제어하는 것이 아니라, 하드웨어를 관리하고 제어하는 역할을 한다.", "응용 프로그램은 시스템 소프트웨어가 아닌 응용 소프트웨어에 해당한다.", "데이터 통신 시스템은 거리와 시간의 한계를 극복하여 원격지의 정보처리기기 사이의 효율적 정보교환을 지원한다.", "폭포수 모형은 사용자가 모든 요구사항을 명확하게 제시해야 합니다.", "소프트웨어 공학은 소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것입니다.", "정보공학 방법론에서 데이터베이스 설계의 표현으로 Entity-Relationship Diagram을 사용합니다."], "subject": ["소프트웨어설계", "소프트웨어설계", "소프트웨어설계", "소프트웨어개발", "소프트웨어개발", "소프트웨어개발", "데이터베이스구축", "데이터베이스구축", "데이터베이스구축", "프로그래밍언어활용", "프로그래밍언어활용", "프로그래밍언어활용", "정보시스템구축관리", "정보시스템구축관리", "정보시스템구축관리"], "wrong_question": [], "weak_type": [], "notes": [], "user_answer": [], "retrieve_answer": ""}
*3
$9
PEXPIREAT
$30
demo_user:teacher:local:shared
$13
1755880405371
*1
$4
EXEC
*1
$5
MULTI
*3
$3
SET
$30
demo_user:teacher:local:shared
$7733
{"question": ["소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기능은?", "데이터베이스 설계 단계 중 저장 레코드 양식 설계, 레코드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은?", "릴레이션의 차수가 4이고 카디널리티가 5이며, 릴레이션 S의 차수가 6이고 카디널리티가 7일 때 두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이션의 차수와 카디널리티는 얼마인가?", "운영체제의 종류에는 Windows, UNIX, Linux 등이 있습니다. 다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은?", "시스템 소프트웨어의 종류에는 운영체제, 언어 번역 프로그램, 매크로 프로세서, 링커, 라이브러리 등이 있습니다. 다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것으로, 소프트웨어 개발 전 과정에 지속적으로 작용할 수 있는 방법, 절차, 기법 등을 의미하는 것은?", "정보공학 방법론에서 데이터베이스 설계의 표현으로 사용하는 모델링 언어는?"], "options": [["  1. 정적 구조", "  2. 동적 행위", "  3. 시스템 구조", "  4. 요구사항 분석"], ["  1. 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "  2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "  3. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "  4. 단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["  1. 요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "  2. 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "  3. 구조적 분석, 구조적 설계, 구현, 테스트", "  4. 구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["  1. 정의 단계", "  2. 개발 단계", "  3. 유지보수 단계", "  4. 설계 단계"], ["  1. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "  2. 모형의 적용 경험과 성공 사례가 많다.", "  3. 단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "  4. 각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["  1. 노드와 간선으로 구성된다.", "  2. 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "  3. 계층 모델이라고도 한다.", "  4. 3개의 서브시스템(모델, 뷰, 제어)으로 구성되어 있다."], ["  1. 데이터 조회", "  2. 데이터 조작", "  3. 데이터베이스 구조 정의", "  4. 데이터 보안"], ["  1. 요구 조건 분석", "  2. 개념적 설계", "  3. 논리적 설계", "  4. 물리적 설계"], ["  1. 10, 35", "  2. 24, 35", "  3. 10, 12", "  4. 24, 12"], ["  1. 다중 프로그래밍을 지원한다", "  2. 사용자 인터페이스를 제공한다", "  3. 하드웨어를 직접 제어한다", "  4. 컴퓨터의 자원을 효율적으로 관리한다"], ["  1. 제어 프로그램", "  2. 처리 프로그램", "  3. 응용 프로그램", "  4. 유틸리티 프로그램"], ["  1. 고속 ․ 고품질의 통신 서비스 제공", "  2. 고성능의 에러 제어 방식을 사용하여 시스템 신뢰도가 높음", "  3. 대형 컴퓨터의 공동 이용", "  4. 단거리 전송만 지원"], ["  1. 각 단계가 끝난 후 결과물이 명확히 나와야 함", "  2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어려움", "  3. 단계별 정의가 분명하고, 전체 공조의 이해가 용이", "  4. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["  1. 소프트웨어 공학", "  2. 정보공학 방법론", "  3. 구조적 방법론", "  4. 시스템 개발"], ["  1. Package Diagram", "  2. State Transition Diagram", "  3. Deployment Diagram", "  4. Entity-Relationship Diagram"]], "answer": ["2", "1", "2", "3", "1", "2", "3", "3", "1", "3", "3", "4", "4", "1", "4"], "explanation": ["소프트웨어 아키텍처는 구성 요소들의 상호작용 및 관계, 각각의 특성을 정의합니다.", "폭포수 모형은 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없는 선형 순차적 모형입니다.", "구조적 방법론은 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍 단계로 구성됩니다.", "유지보수 단계는 소프트웨어를 직접 운용하며, 변경에 초점을 두고 여러 환경 변화에 따라 소프트웨어를 적응 및 유지시키는 단계로, 소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계입니다.", "폭포수 모형의 단점 중 하나는 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다는 것입니다.", "파이프 필터 형태의 소프트웨어 아키텍처는 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복하는 형태입니다.", "DDL은 데이터베이스의 구조를 정의, 변경, 삭제하는 데 사용되는 언어입니다.", "논리적 설계 단계에서는 저장 레코드 양식 설계, 레코드 집중의 분석 및 설계 접근 경로 설계 등이 포함됩니다.", "카티션 프로덕트의 결과로 생성되는 릴레이션의 차수는 두 릴레이션의 차수의 합이고, 카디널리티는 두 릴레이션의 카디널리티의 곱입니다.", "운영체제는 하드웨어를 직접 제어하는 것이 아니라, 하드웨어를 관리하고 제어하는 역할을 한다.", "응용 프로그램은 시스템 소프트웨어가 아닌 응용 소프트웨어에 해당한다.", "데이터 통신 시스템은 거리와 시간의 한계를 극복하여 원격지의 정보처리기기 사이의 효율적 정보교환을 지원한다.", "폭포수 모형은 사용자가 모든 요구사항을 명확하게 제시해야 합니다.", "소프트웨어 공학은 소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것입니다.", "정보공학 방법론에서 데이터베이스 설계의 표현으로 Entity-Relationship Diagram을 사용합니다."], "subject": ["소프트웨어설계", "소프트웨어설계", "소프트웨어설계", "소프트웨어개발", "소프트웨어개발", "소프트웨어개발", "데이터베이스구축", "데이터베이스구축", "데이터베이스구축", "프로그래밍언어활용", "프로그래밍언어활용", "프로그래밍언어활용", "정보시스템구축관리", "정보시스템구축관리", "정보시스템구축관리"], "wrong_question": [], "weak_type": [], "notes": [], "user_answer": [], "retrieve_answer": ""}
*3
$9
PEXPIREAT
$30
demo_user:teacher:local:shared
$13
1755880584752
*1
$4
EXEC
*1
$5
MULTI
*3
$3
SET
$30
demo_user:teacher:local:shared
$7733
{"question": ["소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기능은?", "데이터베이스 설계 단계 중 저장 레코드 양식 설계, 레코드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은?", "릴레이션의 차수가 4이고 카디널리티가 5이며, 릴레이션 S의 차수가 6이고 카디널리티가 7일 때 두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이션의 차수와 카디널리티는 얼마인가?", "운영체제의 종류에는 Windows, UNIX, Linux 등이 있습니다. 다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은?", "시스템 소프트웨어의 종류에는 운영체제, 언어 번역 프로그램, 매크로 프로세서, 링커, 라이브러리 등이 있습니다. 다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것으로, 소프트웨어 개발 전 과정에 지속적으로 작용할 수 있는 방법, 절차, 기법 등을 의미하는 것은?", "정보공학 방법론에서 데이터베이스 설계의 표현으로 사용하는 모델링 언어는?"], "options": [["  1. 정적 구조", "  2. 동적 행위", "  3. 시스템 구조", "  4. 요구사항 분석"], ["  1. 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "  2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "  3. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "  4. 단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["  1. 요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "  2. 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "  3. 구조적 분석, 구조적 설계, 구현, 테스트", "  4. 구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["  1. 정의 단계", "  2. 개발 단계", "  3. 유지보수 단계", "  4. 설계 단계"], ["  1. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "  2. 모형의 적용 경험과 성공 사례가 많다.", "  3. 단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "  4. 각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["  1. 노드와 간선으로 구성된다.", "  2. 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "  3. 계층 모델이라고도 한다.", "  4. 3개의 서브시스템(모델, 뷰, 제어)으로 구성되어 있다."], ["  1. 데이터 조회", "  2. 데이터 조작", "  3. 데이터베이스 구조 정의", "  4. 데이터 보안"], ["  1. 요구 조건 분석", "  2. 개념적 설계", "  3. 논리적 설계", "  4. 물리적 설계"], ["  1. 10, 35", "  2. 24, 35", "  3. 10, 12", "  4. 24, 12"], ["  1. 다중 프로그래밍을 지원한다", "  2. 사용자 인터페이스를 제공한다", "  3. 하드웨어를 직접 제어한다", "  4. 컴퓨터의 자원을 효율적으로 관리한다"], ["  1. 제어 프로그램", "  2. 처리 프로그램", "  3. 응용 프로그램", "  4. 유틸리티 프로그램"], ["  1. 고속 ․ 고품질의 통신 서비스 제공", "  2. 고성능의 에러 제어 방식을 사용하여 시스템 신뢰도가 높음", "  3. 대형 컴퓨터의 공동 이용", "  4. 단거리 전송만 지원"], ["  1. 각 단계가 끝난 후 결과물이 명확히 나와야 함", "  2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어려움", "  3. 단계별 정의가 분명하고, 전체 공조의 이해가 용이", "  4. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["  1. 소프트웨어 공학", "  2. 정보공학 방법론", "  3. 구조적 방법론", "  4. 시스템 개발"], ["  1. Package Diagram", "  2. State Transition Diagram", "  3. Deployment Diagram", "  4. Entity-Relationship Diagram"]], "answer": ["2", "1", "2", "3", "1", "2", "3", "3", "1", "3", "3", "4", "4", "1", "4"], "explanation": ["소프트웨어 아키텍처는 구성 요소들의 상호작용 및 관계, 각각의 특성을 정의합니다.", "폭포수 모형은 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없는 선형 순차적 모형입니다.", "구조적 방법론은 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍 단계로 구성됩니다.", "유지보수 단계는 소프트웨어를 직접 운용하며, 변경에 초점을 두고 여러 환경 변화에 따라 소프트웨어를 적응 및 유지시키는 단계로, 소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계입니다.", "폭포수 모형의 단점 중 하나는 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다는 것입니다.", "파이프 필터 형태의 소프트웨어 아키텍처는 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복하는 형태입니다.", "DDL은 데이터베이스의 구조를 정의, 변경, 삭제하는 데 사용되는 언어입니다.", "논리적 설계 단계에서는 저장 레코드 양식 설계, 레코드 집중의 분석 및 설계 접근 경로 설계 등이 포함됩니다.", "카티션 프로덕트의 결과로 생성되는 릴레이션의 차수는 두 릴레이션의 차수의 합이고, 카디널리티는 두 릴레이션의 카디널리티의 곱입니다.", "운영체제는 하드웨어를 직접 제어하는 것이 아니라, 하드웨어를 관리하고 제어하는 역할을 한다.", "응용 프로그램은 시스템 소프트웨어가 아닌 응용 소프트웨어에 해당한다.", "데이터 통신 시스템은 거리와 시간의 한계를 극복하여 원격지의 정보처리기기 사이의 효율적 정보교환을 지원한다.", "폭포수 모형은 사용자가 모든 요구사항을 명확하게 제시해야 합니다.", "소프트웨어 공학은 소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것입니다.", "정보공학 방법론에서 데이터베이스 설계의 표현으로 Entity-Relationship Diagram을 사용합니다."], "subject": ["소프트웨어설계", "소프트웨어설계", "소프트웨어설계", "소프트웨어개발", "소프트웨어개발", "소프트웨어개발", "데이터베이스구축", "데이터베이스구축", "데이터베이스구축", "프로그래밍언어활용", "프로그래밍언어활용", "프로그래밍언어활용", "정보시스템구축관리", "정보시스템구축관리", "정보시스템구축관리"], "wrong_question": [], "weak_type": [], "notes": [], "user_answer": [], "retrieve_answer": ""}
*3
$9
PEXPIREAT
$30
demo_user:teacher:local:shared
$13
1755880673096
*1
$4
EXEC
