*1
$5
MULTI
*2
$6
SELECT
$1
0
*3
$3
SET
$30
demo_user:teacher:local:shared
$173
{"question": [], "options": [], "answer": [], "explanation": [], "subject": [], "wrong_question": [], "weak_type": [], "notes": [], "user_answer": [], "retrieve_answer": ""}
*3
$9
PEXPIREAT
$30
demo_user:teacher:local:shared
$13
1755876540635
*1
$4
EXEC
*1
$5
MULTI
*3
$3
SET
$30
demo_user:teacher:local:shared
$173
{"question": [], "options": [], "answer": [], "explanation": [], "subject": [], "wrong_question": [], "weak_type": [], "notes": [], "user_answer": [], "retrieve_answer": ""}
*3
$9
PEXPIREAT
$30
demo_user:teacher:local:shared
$13
1755877308135
*1
$4
EXEC
*1
$5
MULTI
*3
$3
SET
$30
demo_user:teacher:local:shared
$173
{"question": [], "options": [], "answer": [], "explanation": [], "subject": [], "wrong_question": [], "weak_type": [], "notes": [], "user_answer": [], "retrieve_answer": ""}
*3
$9
PEXPIREAT
$30
demo_user:teacher:local:shared
$13
1755877977346
*1
$4
EXEC
*1
$5
MULTI
*3
$3
SET
$30
demo_user:teacher:local:shared
$7733
{"question": ["소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기능은?", "데이터베이스 설계 단계 중 저장 레코드 양식 설계, 레코드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은?", "릴레이션의 차수가 4이고 카디널리티가 5이며, 릴레이션 S의 차수가 6이고 카디널리티가 7일 때 두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이션의 차수와 카디널리티는 얼마인가?", "운영체제의 종류에는 Windows, UNIX, Linux 등이 있습니다. 다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은?", "시스템 소프트웨어의 종류에는 운영체제, 언어 번역 프로그램, 매크로 프로세서, 링커, 라이브러리 등이 있습니다. 다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것으로, 소프트웨어 개발 전 과정에 지속적으로 작용할 수 있는 방법, 절차, 기법 등을 의미하는 것은?", "정보공학 방법론에서 데이터베이스 설계의 표현으로 사용하는 모델링 언어는?"], "options": [["  1. 정적 구조", "  2. 동적 행위", "  3. 시스템 구조", "  4. 요구사항 분석"], ["  1. 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "  2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "  3. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "  4. 단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["  1. 요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "  2. 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "  3. 구조적 분석, 구조적 설계, 구현, 테스트", "  4. 구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["  1. 정의 단계", "  2. 개발 단계", "  3. 유지보수 단계", "  4. 설계 단계"], ["  1. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "  2. 모형의 적용 경험과 성공 사례가 많다.", "  3. 단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "  4. 각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["  1. 노드와 간선으로 구성된다.", "  2. 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "  3. 계층 모델이라고도 한다.", "  4. 3개의 서브시스템(모델, 뷰, 제어)으로 구성되어 있다."], ["  1. 데이터 조회", "  2. 데이터 조작", "  3. 데이터베이스 구조 정의", "  4. 데이터 보안"], ["  1. 요구 조건 분석", "  2. 개념적 설계", "  3. 논리적 설계", "  4. 물리적 설계"], ["  1. 10, 35", "  2. 24, 35", "  3. 10, 12", "  4. 24, 12"], ["  1. 다중 프로그래밍을 지원한다", "  2. 사용자 인터페이스를 제공한다", "  3. 하드웨어를 직접 제어한다", "  4. 컴퓨터의 자원을 효율적으로 관리한다"], ["  1. 제어 프로그램", "  2. 처리 프로그램", "  3. 응용 프로그램", "  4. 유틸리티 프로그램"], ["  1. 고속 ․ 고품질의 통신 서비스 제공", "  2. 고성능의 에러 제어 방식을 사용하여 시스템 신뢰도가 높음", "  3. 대형 컴퓨터의 공동 이용", "  4. 단거리 전송만 지원"], ["  1. 각 단계가 끝난 후 결과물이 명확히 나와야 함", "  2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어려움", "  3. 단계별 정의가 분명하고, 전체 공조의 이해가 용이", "  4. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["  1. 소프트웨어 공학", "  2. 정보공학 방법론", "  3. 구조적 방법론", "  4. 시스템 개발"], ["  1. Package Diagram", "  2. State Transition Diagram", "  3. Deployment Diagram", "  4. Entity-Relationship Diagram"]], "answer": ["2", "1", "2", "3", "1", "2", "3", "3", "1", "3", "3", "4", "4", "1", "4"], "explanation": ["소프트웨어 아키텍처는 구성 요소들의 상호작용 및 관계, 각각의 특성을 정의합니다.", "폭포수 모형은 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없는 선형 순차적 모형입니다.", "구조적 방법론은 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍 단계로 구성됩니다.", "유지보수 단계는 소프트웨어를 직접 운용하며, 변경에 초점을 두고 여러 환경 변화에 따라 소프트웨어를 적응 및 유지시키는 단계로, 소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계입니다.", "폭포수 모형의 단점 중 하나는 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다는 것입니다.", "파이프 필터 형태의 소프트웨어 아키텍처는 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복하는 형태입니다.", "DDL은 데이터베이스의 구조를 정의, 변경, 삭제하는 데 사용되는 언어입니다.", "논리적 설계 단계에서는 저장 레코드 양식 설계, 레코드 집중의 분석 및 설계 접근 경로 설계 등이 포함됩니다.", "카티션 프로덕트의 결과로 생성되는 릴레이션의 차수는 두 릴레이션의 차수의 합이고, 카디널리티는 두 릴레이션의 카디널리티의 곱입니다.", "운영체제는 하드웨어를 직접 제어하는 것이 아니라, 하드웨어를 관리하고 제어하는 역할을 한다.", "응용 프로그램은 시스템 소프트웨어가 아닌 응용 소프트웨어에 해당한다.", "데이터 통신 시스템은 거리와 시간의 한계를 극복하여 원격지의 정보처리기기 사이의 효율적 정보교환을 지원한다.", "폭포수 모형은 사용자가 모든 요구사항을 명확하게 제시해야 합니다.", "소프트웨어 공학은 소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것입니다.", "정보공학 방법론에서 데이터베이스 설계의 표현으로 Entity-Relationship Diagram을 사용합니다."], "subject": ["소프트웨어설계", "소프트웨어설계", "소프트웨어설계", "소프트웨어개발", "소프트웨어개발", "소프트웨어개발", "데이터베이스구축", "데이터베이스구축", "데이터베이스구축", "프로그래밍언어활용", "프로그래밍언어활용", "프로그래밍언어활용", "정보시스템구축관리", "정보시스템구축관리", "정보시스템구축관리"], "wrong_question": [], "weak_type": [], "notes": [], "user_answer": [], "retrieve_answer": ""}
*3
$9
PEXPIREAT
$30
demo_user:teacher:local:shared
$13
1755880405371
*1
$4
EXEC
*1
$5
MULTI
*3
$3
SET
$30
demo_user:teacher:local:shared
$7733
{"question": ["소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기능은?", "데이터베이스 설계 단계 중 저장 레코드 양식 설계, 레코드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은?", "릴레이션의 차수가 4이고 카디널리티가 5이며, 릴레이션 S의 차수가 6이고 카디널리티가 7일 때 두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이션의 차수와 카디널리티는 얼마인가?", "운영체제의 종류에는 Windows, UNIX, Linux 등이 있습니다. 다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은?", "시스템 소프트웨어의 종류에는 운영체제, 언어 번역 프로그램, 매크로 프로세서, 링커, 라이브러리 등이 있습니다. 다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것으로, 소프트웨어 개발 전 과정에 지속적으로 작용할 수 있는 방법, 절차, 기법 등을 의미하는 것은?", "정보공학 방법론에서 데이터베이스 설계의 표현으로 사용하는 모델링 언어는?"], "options": [["  1. 정적 구조", "  2. 동적 행위", "  3. 시스템 구조", "  4. 요구사항 분석"], ["  1. 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "  2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "  3. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "  4. 단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["  1. 요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "  2. 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "  3. 구조적 분석, 구조적 설계, 구현, 테스트", "  4. 구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["  1. 정의 단계", "  2. 개발 단계", "  3. 유지보수 단계", "  4. 설계 단계"], ["  1. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "  2. 모형의 적용 경험과 성공 사례가 많다.", "  3. 단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "  4. 각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["  1. 노드와 간선으로 구성된다.", "  2. 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "  3. 계층 모델이라고도 한다.", "  4. 3개의 서브시스템(모델, 뷰, 제어)으로 구성되어 있다."], ["  1. 데이터 조회", "  2. 데이터 조작", "  3. 데이터베이스 구조 정의", "  4. 데이터 보안"], ["  1. 요구 조건 분석", "  2. 개념적 설계", "  3. 논리적 설계", "  4. 물리적 설계"], ["  1. 10, 35", "  2. 24, 35", "  3. 10, 12", "  4. 24, 12"], ["  1. 다중 프로그래밍을 지원한다", "  2. 사용자 인터페이스를 제공한다", "  3. 하드웨어를 직접 제어한다", "  4. 컴퓨터의 자원을 효율적으로 관리한다"], ["  1. 제어 프로그램", "  2. 처리 프로그램", "  3. 응용 프로그램", "  4. 유틸리티 프로그램"], ["  1. 고속 ․ 고품질의 통신 서비스 제공", "  2. 고성능의 에러 제어 방식을 사용하여 시스템 신뢰도가 높음", "  3. 대형 컴퓨터의 공동 이용", "  4. 단거리 전송만 지원"], ["  1. 각 단계가 끝난 후 결과물이 명확히 나와야 함", "  2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어려움", "  3. 단계별 정의가 분명하고, 전체 공조의 이해가 용이", "  4. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["  1. 소프트웨어 공학", "  2. 정보공학 방법론", "  3. 구조적 방법론", "  4. 시스템 개발"], ["  1. Package Diagram", "  2. State Transition Diagram", "  3. Deployment Diagram", "  4. Entity-Relationship Diagram"]], "answer": ["2", "1", "2", "3", "1", "2", "3", "3", "1", "3", "3", "4", "4", "1", "4"], "explanation": ["소프트웨어 아키텍처는 구성 요소들의 상호작용 및 관계, 각각의 특성을 정의합니다.", "폭포수 모형은 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없는 선형 순차적 모형입니다.", "구조적 방법론은 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍 단계로 구성됩니다.", "유지보수 단계는 소프트웨어를 직접 운용하며, 변경에 초점을 두고 여러 환경 변화에 따라 소프트웨어를 적응 및 유지시키는 단계로, 소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계입니다.", "폭포수 모형의 단점 중 하나는 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다는 것입니다.", "파이프 필터 형태의 소프트웨어 아키텍처는 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복하는 형태입니다.", "DDL은 데이터베이스의 구조를 정의, 변경, 삭제하는 데 사용되는 언어입니다.", "논리적 설계 단계에서는 저장 레코드 양식 설계, 레코드 집중의 분석 및 설계 접근 경로 설계 등이 포함됩니다.", "카티션 프로덕트의 결과로 생성되는 릴레이션의 차수는 두 릴레이션의 차수의 합이고, 카디널리티는 두 릴레이션의 카디널리티의 곱입니다.", "운영체제는 하드웨어를 직접 제어하는 것이 아니라, 하드웨어를 관리하고 제어하는 역할을 한다.", "응용 프로그램은 시스템 소프트웨어가 아닌 응용 소프트웨어에 해당한다.", "데이터 통신 시스템은 거리와 시간의 한계를 극복하여 원격지의 정보처리기기 사이의 효율적 정보교환을 지원한다.", "폭포수 모형은 사용자가 모든 요구사항을 명확하게 제시해야 합니다.", "소프트웨어 공학은 소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것입니다.", "정보공학 방법론에서 데이터베이스 설계의 표현으로 Entity-Relationship Diagram을 사용합니다."], "subject": ["소프트웨어설계", "소프트웨어설계", "소프트웨어설계", "소프트웨어개발", "소프트웨어개발", "소프트웨어개발", "데이터베이스구축", "데이터베이스구축", "데이터베이스구축", "프로그래밍언어활용", "프로그래밍언어활용", "프로그래밍언어활용", "정보시스템구축관리", "정보시스템구축관리", "정보시스템구축관리"], "wrong_question": [], "weak_type": [], "notes": [], "user_answer": [], "retrieve_answer": ""}
*3
$9
PEXPIREAT
$30
demo_user:teacher:local:shared
$13
1755880584752
*1
$4
EXEC
*1
$5
MULTI
*3
$3
SET
$30
demo_user:teacher:local:shared
$7733
{"question": ["소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기능은?", "데이터베이스 설계 단계 중 저장 레코드 양식 설계, 레코드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은?", "릴레이션의 차수가 4이고 카디널리티가 5이며, 릴레이션 S의 차수가 6이고 카디널리티가 7일 때 두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이션의 차수와 카디널리티는 얼마인가?", "운영체제의 종류에는 Windows, UNIX, Linux 등이 있습니다. 다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은?", "시스템 소프트웨어의 종류에는 운영체제, 언어 번역 프로그램, 매크로 프로세서, 링커, 라이브러리 등이 있습니다. 다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것으로, 소프트웨어 개발 전 과정에 지속적으로 작용할 수 있는 방법, 절차, 기법 등을 의미하는 것은?", "정보공학 방법론에서 데이터베이스 설계의 표현으로 사용하는 모델링 언어는?"], "options": [["  1. 정적 구조", "  2. 동적 행위", "  3. 시스템 구조", "  4. 요구사항 분석"], ["  1. 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "  2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "  3. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "  4. 단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["  1. 요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "  2. 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "  3. 구조적 분석, 구조적 설계, 구현, 테스트", "  4. 구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["  1. 정의 단계", "  2. 개발 단계", "  3. 유지보수 단계", "  4. 설계 단계"], ["  1. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "  2. 모형의 적용 경험과 성공 사례가 많다.", "  3. 단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "  4. 각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["  1. 노드와 간선으로 구성된다.", "  2. 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "  3. 계층 모델이라고도 한다.", "  4. 3개의 서브시스템(모델, 뷰, 제어)으로 구성되어 있다."], ["  1. 데이터 조회", "  2. 데이터 조작", "  3. 데이터베이스 구조 정의", "  4. 데이터 보안"], ["  1. 요구 조건 분석", "  2. 개념적 설계", "  3. 논리적 설계", "  4. 물리적 설계"], ["  1. 10, 35", "  2. 24, 35", "  3. 10, 12", "  4. 24, 12"], ["  1. 다중 프로그래밍을 지원한다", "  2. 사용자 인터페이스를 제공한다", "  3. 하드웨어를 직접 제어한다", "  4. 컴퓨터의 자원을 효율적으로 관리한다"], ["  1. 제어 프로그램", "  2. 처리 프로그램", "  3. 응용 프로그램", "  4. 유틸리티 프로그램"], ["  1. 고속 ․ 고품질의 통신 서비스 제공", "  2. 고성능의 에러 제어 방식을 사용하여 시스템 신뢰도가 높음", "  3. 대형 컴퓨터의 공동 이용", "  4. 단거리 전송만 지원"], ["  1. 각 단계가 끝난 후 결과물이 명확히 나와야 함", "  2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어려움", "  3. 단계별 정의가 분명하고, 전체 공조의 이해가 용이", "  4. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["  1. 소프트웨어 공학", "  2. 정보공학 방법론", "  3. 구조적 방법론", "  4. 시스템 개발"], ["  1. Package Diagram", "  2. State Transition Diagram", "  3. Deployment Diagram", "  4. Entity-Relationship Diagram"]], "answer": ["2", "1", "2", "3", "1", "2", "3", "3", "1", "3", "3", "4", "4", "1", "4"], "explanation": ["소프트웨어 아키텍처는 구성 요소들의 상호작용 및 관계, 각각의 특성을 정의합니다.", "폭포수 모형은 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없는 선형 순차적 모형입니다.", "구조적 방법론은 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍 단계로 구성됩니다.", "유지보수 단계는 소프트웨어를 직접 운용하며, 변경에 초점을 두고 여러 환경 변화에 따라 소프트웨어를 적응 및 유지시키는 단계로, 소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계입니다.", "폭포수 모형의 단점 중 하나는 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다는 것입니다.", "파이프 필터 형태의 소프트웨어 아키텍처는 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복하는 형태입니다.", "DDL은 데이터베이스의 구조를 정의, 변경, 삭제하는 데 사용되는 언어입니다.", "논리적 설계 단계에서는 저장 레코드 양식 설계, 레코드 집중의 분석 및 설계 접근 경로 설계 등이 포함됩니다.", "카티션 프로덕트의 결과로 생성되는 릴레이션의 차수는 두 릴레이션의 차수의 합이고, 카디널리티는 두 릴레이션의 카디널리티의 곱입니다.", "운영체제는 하드웨어를 직접 제어하는 것이 아니라, 하드웨어를 관리하고 제어하는 역할을 한다.", "응용 프로그램은 시스템 소프트웨어가 아닌 응용 소프트웨어에 해당한다.", "데이터 통신 시스템은 거리와 시간의 한계를 극복하여 원격지의 정보처리기기 사이의 효율적 정보교환을 지원한다.", "폭포수 모형은 사용자가 모든 요구사항을 명확하게 제시해야 합니다.", "소프트웨어 공학은 소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것입니다.", "정보공학 방법론에서 데이터베이스 설계의 표현으로 Entity-Relationship Diagram을 사용합니다."], "subject": ["소프트웨어설계", "소프트웨어설계", "소프트웨어설계", "소프트웨어개발", "소프트웨어개발", "소프트웨어개발", "데이터베이스구축", "데이터베이스구축", "데이터베이스구축", "프로그래밍언어활용", "프로그래밍언어활용", "프로그래밍언어활용", "정보시스템구축관리", "정보시스템구축관리", "정보시스템구축관리"], "wrong_question": [], "weak_type": [], "notes": [], "user_answer": [], "retrieve_answer": ""}
*3
$9
PEXPIREAT
$30
demo_user:teacher:local:shared
$13
1755880673096
*1
$4
EXEC
*1
$5
MULTI
*2
$6
SELECT
$1
0
*3
$3
SET
$30
demo_user:teacher:local:shared
$12664
{"question": ["소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기능은?", "데이터베이스 설계 단계 중 저장 레코드 양식 설계, 레코드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은?", "릴레이션의 차수가 4이고 카디널리티가 5이며, 릴레이션 S의 차수가 6이고 카디널리티가 7일 때 두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이션의 차수와 카디널리티는 얼마인가?", "운영체제의 종류에는 Windows, UNIX, Linux 등이 있습니다. 다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은?", "시스템 소프트웨어의 종류에는 운영체제, 언어 번역 프로그램, 매크로 프로세서, 링커, 라이브러리 등이 있습니다. 다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것으로, 소프트웨어 개발 전 과정에 지속적으로 작용할 수 있는 방법, 절차, 기법 등을 의미하는 것은?", "정보공학 방법론에서 데이터베이스 설계의 표현으로 사용하는 모델링 언어는?", "소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기 능 은?", "데이터 베 이스 설계 단계 중 저 장 레코 드 양식 설계, 레코 드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은?", "릴레이션의 차수가 4이고 카디널리티가 5이며, 릴레이션 S의 차수가 6이고 카디널리티가 7일 때 두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이션의 차수와 카디널리티는 얼마인가?", "운영체제의 종류 에는 Windows, UNIX, Linux 등 이 있습 니다. 다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은?", "시스템 소프트웨어의 종류에는 운영체제, 언어 번역 프로그램, 매크로 프로세서, 링커, 라이브러리 등이 있습니다. 다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것으로, 소프트웨어 개발 전 과정에 지속적으로 작용할 수 있는 방법, 절차, 기법 등을 의미하는 것은?", "정보공 학 방법론에서 데이터 베 이스 설계의 표 현으로 사용하는 모델 링 언 어는?"], "options": [["  1. 정적 구조", "  2. 동적 행위", "  3. 시스템 구조", "  4. 요구사항 분석"], ["  1. 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "  2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "  3. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "  4. 단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["  1. 요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "  2. 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "  3. 구조적 분석, 구조적 설계, 구현, 테스트", "  4. 구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["  1. 정의 단계", "  2. 개발 단계", "  3. 유지보수 단계", "  4. 설계 단계"], ["  1. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "  2. 모형의 적용 경험과 성공 사례가 많다.", "  3. 단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "  4. 각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["  1. 노드와 간선으로 구성된다.", "  2. 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "  3. 계층 모델이라고도 한다.", "  4. 3개의 서브시스템(모델, 뷰, 제어)으로 구성되어 있다."], ["  1. 데이터 조회", "  2. 데이터 조작", "  3. 데이터베이스 구조 정의", "  4. 데이터 보안"], ["  1. 요구 조건 분석", "  2. 개념적 설계", "  3. 논리적 설계", "  4. 물리적 설계"], ["  1. 10, 35", "  2. 24, 35", "  3. 10, 12", "  4. 24, 12"], ["  1. 다중 프로그래밍을 지원한다", "  2. 사용자 인터페이스를 제공한다", "  3. 하드웨어를 직접 제어한다", "  4. 컴퓨터의 자원을 효율적으로 관리한다"], ["  1. 제어 프로그램", "  2. 처리 프로그램", "  3. 응용 프로그램", "  4. 유틸리티 프로그램"], ["  1. 고속 ․ 고품질의 통신 서비스 제공", "  2. 고성능의 에러 제어 방식을 사용하여 시스템 신뢰도가 높음", "  3. 대형 컴퓨터의 공동 이용", "  4. 단거리 전송만 지원"], ["  1. 각 단계가 끝난 후 결과물이 명확히 나와야 함", "  2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어려움", "  3. 단계별 정의가 분명하고, 전체 공조의 이해가 용이", "  4. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["  1. 소프트웨어 공학", "  2. 정보공학 방법론", "  3. 구조적 방법론", "  4. 시스템 개발"], ["  1. Package Diagram", "  2. State Transition Diagram", "  3. Deployment Diagram", "  4. Entity-Relationship Diagram"], ["1. 정적 구조", "2. 동적 행위", "3. 시스템 구조", "4. 요구사항 분석"], ["1. 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "3. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "4. 단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "구조적 분석, 구조적 설계, 구현, 테스트", "구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["1. 정의 단계", "2. 개발 단계", "3. 유지보수 단계", "4. 설계 단계"], ["1. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "2. 모형의 적용 경험과 성공 사례가 많다.", "3. 단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "4. 각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["노드와 간선으로 구성된다.", "서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "계층 모델이라고도 한다.", "3개의 서브시스템(모델, 뷰 , 제어)으로 구성되어 있다."], ["데이터 조 회", "데이터 조작", "데이터 베 이스 구조 정의", "데이터 보 안"], ["1) 1. 요구 조 건 분석", "2) 2. 개 념 적 설계", "3) 3. 논 리적 설계", "4) 4. 물리적 설계"], ["10, 35", "24, 35", "10, 12", "24, 12"], ["1. 다중 프로그래밍을 지 원 한다", "2. 사용자 인 터 페 이스를 제공한다", "3. 하드웨어를 직접 제어한다", "4. 컴퓨 터의 자 원 을 효율 적으로 관리한다"], ["제어 프로그램", "처리 프로그램", "응용 프로그램", "유틸리티 프로그램"], ["고속 고품질의 통신 서비스 제공", "고성능의 에러 제어 방식으로 시스템 신뢰도가 높음", "대형 컴퓨터의 공동 이용", "단거리 전송만 지원"], ["1. 각 단계가 끝난 후 결과물이 명확히 나와야 함", "2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵움", "3. 단계별 정의가 분명하고, 전체 공조의 이해가 용이", "4. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["소프트웨어 공학", "정보공학 방법론", "구조적 방법론", "시스템 개발"], ["Package Diagram", "State Transition Diagram", "Deployment Diagram", "Entity-Relationship Diagram"]], "answer": ["2", "1", "2", "3", "1", "2", "3", "3", "1", "3", "3", "4", "4", "1", "4", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""], "explanation": ["소프트웨어 아키텍처는 구성 요소들의 상호작용 및 관계, 각각의 특성을 정의합니다.", "폭포수 모형은 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없는 선형 순차적 모형입니다.", "구조적 방법론은 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍 단계로 구성됩니다.", "유지보수 단계는 소프트웨어를 직접 운용하며, 변경에 초점을 두고 여러 환경 변화에 따라 소프트웨어를 적응 및 유지시키는 단계로, 소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계입니다.", "폭포수 모형의 단점 중 하나는 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다는 것입니다.", "파이프 필터 형태의 소프트웨어 아키텍처는 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복하는 형태입니다.", "DDL은 데이터베이스의 구조를 정의, 변경, 삭제하는 데 사용되는 언어입니다.", "논리적 설계 단계에서는 저장 레코드 양식 설계, 레코드 집중의 분석 및 설계 접근 경로 설계 등이 포함됩니다.", "카티션 프로덕트의 결과로 생성되는 릴레이션의 차수는 두 릴레이션의 차수의 합이고, 카디널리티는 두 릴레이션의 카디널리티의 곱입니다.", "운영체제는 하드웨어를 직접 제어하는 것이 아니라, 하드웨어를 관리하고 제어하는 역할을 한다.", "응용 프로그램은 시스템 소프트웨어가 아닌 응용 소프트웨어에 해당한다.", "데이터 통신 시스템은 거리와 시간의 한계를 극복하여 원격지의 정보처리기기 사이의 효율적 정보교환을 지원한다.", "폭포수 모형은 사용자가 모든 요구사항을 명확하게 제시해야 합니다.", "소프트웨어 공학은 소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것입니다.", "정보공학 방법론에서 데이터베이스 설계의 표현으로 Entity-Relationship Diagram을 사용합니다.", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""], "subject": ["소프트웨어설계", "소프트웨어설계", "소프트웨어설계", "소프트웨어개발", "소프트웨어개발", "소프트웨어개발", "데이터베이스구축", "데이터베이스구축", "데이터베이스구축", "프로그래밍언어활용", "프로그래밍언어활용", "프로그래밍언어활용", "정보시스템구축관리", "정보시스템구축관리", "정보시스템구축관리", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반"], "wrong_question": [], "weak_type": [], "notes": [], "user_answer": [], "retrieve_answer": ""}
*3
$9
PEXPIREAT
$30
demo_user:teacher:local:shared
$13
1755995963192
*1
$4
EXEC
*1
$5
MULTI
*3
$3
SET
$30
demo_user:teacher:local:shared
$17593
{"question": ["소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기능은?", "데이터베이스 설계 단계 중 저장 레코드 양식 설계, 레코드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은?", "릴레이션의 차수가 4이고 카디널리티가 5이며, 릴레이션 S의 차수가 6이고 카디널리티가 7일 때 두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이션의 차수와 카디널리티는 얼마인가?", "운영체제의 종류에는 Windows, UNIX, Linux 등이 있습니다. 다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은?", "시스템 소프트웨어의 종류에는 운영체제, 언어 번역 프로그램, 매크로 프로세서, 링커, 라이브러리 등이 있습니다. 다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것으로, 소프트웨어 개발 전 과정에 지속적으로 작용할 수 있는 방법, 절차, 기법 등을 의미하는 것은?", "정보공학 방법론에서 데이터베이스 설계의 표현으로 사용하는 모델링 언어는?", "소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기 능 은?", "데이터 베 이스 설계 단계 중 저 장 레코 드 양식 설계, 레코 드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은?", "릴레이션의 차수가 4이고 카디널리티가 5이며, 릴레이션 S의 차수가 6이고 카디널리티가 7일 때 두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이션의 차수와 카디널리티는 얼마인가?", "운영체제의 종류 에는 Windows, UNIX, Linux 등 이 있습 니다. 다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은?", "시스템 소프트웨어의 종류에는 운영체제, 언어 번역 프로그램, 매크로 프로세서, 링커, 라이브러리 등이 있습니다. 다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것으로, 소프트웨어 개발 전 과정에 지속적으로 작용할 수 있는 방법, 절차, 기법 등을 의미하는 것은?", "정보공 학 방법론에서 데이터 베 이스 설계의 표 현으로 사용하는 모델 링 언 어는?", "소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기 능 은?", "데이터 베 이스 설계 단계 중 저 장 레코 드 양식 설계, 레코 드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은?", "릴레이션의 차수가 4이고 카디널리티가 5이며, 릴레이션 S의 차수가 6이고 카디널리티가 7일 때 두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이션의 차수와 카디널리티는 얼마인가?", "운영체제의 종류 에는 Windows, UNIX, Linux 등 이 있습 니다. 다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은?", "시스템 소프트웨어의 종류에는 운영체제, 언어 번역 프로그램, 매크로 프로세서, 링커, 라이브러리 등이 있습니다. 다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것으로, 소프트웨어 개발 전 과정에 지속적으로 작용할 수 있는 방법, 절차, 기법 등을 의미하는 것은?", "정보공 학 방법론에서 데이터 베 이스 설계의 표 현으로 사용하는 모델 링 언 어는?"], "options": [["  1. 정적 구조", "  2. 동적 행위", "  3. 시스템 구조", "  4. 요구사항 분석"], ["  1. 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "  2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "  3. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "  4. 단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["  1. 요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "  2. 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "  3. 구조적 분석, 구조적 설계, 구현, 테스트", "  4. 구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["  1. 정의 단계", "  2. 개발 단계", "  3. 유지보수 단계", "  4. 설계 단계"], ["  1. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "  2. 모형의 적용 경험과 성공 사례가 많다.", "  3. 단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "  4. 각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["  1. 노드와 간선으로 구성된다.", "  2. 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "  3. 계층 모델이라고도 한다.", "  4. 3개의 서브시스템(모델, 뷰, 제어)으로 구성되어 있다."], ["  1. 데이터 조회", "  2. 데이터 조작", "  3. 데이터베이스 구조 정의", "  4. 데이터 보안"], ["  1. 요구 조건 분석", "  2. 개념적 설계", "  3. 논리적 설계", "  4. 물리적 설계"], ["  1. 10, 35", "  2. 24, 35", "  3. 10, 12", "  4. 24, 12"], ["  1. 다중 프로그래밍을 지원한다", "  2. 사용자 인터페이스를 제공한다", "  3. 하드웨어를 직접 제어한다", "  4. 컴퓨터의 자원을 효율적으로 관리한다"], ["  1. 제어 프로그램", "  2. 처리 프로그램", "  3. 응용 프로그램", "  4. 유틸리티 프로그램"], ["  1. 고속 ․ 고품질의 통신 서비스 제공", "  2. 고성능의 에러 제어 방식을 사용하여 시스템 신뢰도가 높음", "  3. 대형 컴퓨터의 공동 이용", "  4. 단거리 전송만 지원"], ["  1. 각 단계가 끝난 후 결과물이 명확히 나와야 함", "  2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어려움", "  3. 단계별 정의가 분명하고, 전체 공조의 이해가 용이", "  4. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["  1. 소프트웨어 공학", "  2. 정보공학 방법론", "  3. 구조적 방법론", "  4. 시스템 개발"], ["  1. Package Diagram", "  2. State Transition Diagram", "  3. Deployment Diagram", "  4. Entity-Relationship Diagram"], ["1. 정적 구조", "2. 동적 행위", "3. 시스템 구조", "4. 요구사항 분석"], ["1. 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "3. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "4. 단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "구조적 분석, 구조적 설계, 구현, 테스트", "구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["1. 정의 단계", "2. 개발 단계", "3. 유지보수 단계", "4. 설계 단계"], ["1. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "2. 모형의 적용 경험과 성공 사례가 많다.", "3. 단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "4. 각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["노드와 간선으로 구성된다.", "서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "계층 모델이라고도 한다.", "3개의 서브시스템(모델, 뷰 , 제어)으로 구성되어 있다."], ["데이터 조 회", "데이터 조작", "데이터 베 이스 구조 정의", "데이터 보 안"], ["1) 1. 요구 조 건 분석", "2) 2. 개 념 적 설계", "3) 3. 논 리적 설계", "4) 4. 물리적 설계"], ["10, 35", "24, 35", "10, 12", "24, 12"], ["1. 다중 프로그래밍을 지 원 한다", "2. 사용자 인 터 페 이스를 제공한다", "3. 하드웨어를 직접 제어한다", "4. 컴퓨 터의 자 원 을 효율 적으로 관리한다"], ["제어 프로그램", "처리 프로그램", "응용 프로그램", "유틸리티 프로그램"], ["고속 고품질의 통신 서비스 제공", "고성능의 에러 제어 방식으로 시스템 신뢰도가 높음", "대형 컴퓨터의 공동 이용", "단거리 전송만 지원"], ["1. 각 단계가 끝난 후 결과물이 명확히 나와야 함", "2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵움", "3. 단계별 정의가 분명하고, 전체 공조의 이해가 용이", "4. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["소프트웨어 공학", "정보공학 방법론", "구조적 방법론", "시스템 개발"], ["Package Diagram", "State Transition Diagram", "Deployment Diagram", "Entity-Relationship Diagram"], ["1. 정적 구조", "2. 동적 행위", "3. 시스템 구조", "4. 요구사항 분석"], ["1. 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "3. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "4. 단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "구조적 분석, 구조적 설계, 구현, 테스트", "구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["1. 정의 단계", "2. 개발 단계", "3. 유지보수 단계", "4. 설계 단계"], ["1. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "2. 모형의 적용 경험과 성공 사례가 많다.", "3. 단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "4. 각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["노드와 간선으로 구성된다.", "서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "계층 모델이라고도 한다.", "3개의 서브시스템(모델, 뷰 , 제어)으로 구성되어 있다."], ["데이터 조 회", "데이터 조작", "데이터 베 이스 구조 정의", "데이터 보 안"], ["1) 1. 요구 조 건 분석", "2) 2. 개 념 적 설계", "3) 3. 논 리적 설계", "4) 4. 물리적 설계"], ["10, 35", "24, 35", "10, 12", "24, 12"], ["1) 다중 프로그래밍을 지 원 한다", "2) 사용자 인 터 페 이스를 제공한다", "3) 하드웨어를 직접 제어한다", "4) 컴퓨 터의 자 원 을 효율 적으로 관리한다"], ["제어 프로그램", "처리 프로그램", "응용 프로그램", "유틸리티 프로그램"], ["고속 고품질의 통신 서비스 제공", "고성능의 에러 제어 방식을 사용하여 시스템 신뢰도가 높음", "대형 컴퓨터의 공동 이용", "단거리 전송만 지원"], ["각 단계가 끝난 후 결과물이 명확히 나와야 함", "개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵움", "단계별 정의가 분명하고, 전체 공조의 이해가 용이", "사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["소프트웨어 공학", "정보공학 방법론", "구조적 방법론", "시스템 개발"], ["Package Diagram", "State Transition Diagram", "Deployment Diagram", "Entity-Relationship Diagram"]], "answer": ["2", "1", "2", "3", "1", "2", "3", "3", "1", "3", "3", "4", "4", "1", "4", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""], "explanation": ["소프트웨어 아키텍처는 구성 요소들의 상호작용 및 관계, 각각의 특성을 정의합니다.", "폭포수 모형은 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없는 선형 순차적 모형입니다.", "구조적 방법론은 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍 단계로 구성됩니다.", "유지보수 단계는 소프트웨어를 직접 운용하며, 변경에 초점을 두고 여러 환경 변화에 따라 소프트웨어를 적응 및 유지시키는 단계로, 소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계입니다.", "폭포수 모형의 단점 중 하나는 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다는 것입니다.", "파이프 필터 형태의 소프트웨어 아키텍처는 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복하는 형태입니다.", "DDL은 데이터베이스의 구조를 정의, 변경, 삭제하는 데 사용되는 언어입니다.", "논리적 설계 단계에서는 저장 레코드 양식 설계, 레코드 집중의 분석 및 설계 접근 경로 설계 등이 포함됩니다.", "카티션 프로덕트의 결과로 생성되는 릴레이션의 차수는 두 릴레이션의 차수의 합이고, 카디널리티는 두 릴레이션의 카디널리티의 곱입니다.", "운영체제는 하드웨어를 직접 제어하는 것이 아니라, 하드웨어를 관리하고 제어하는 역할을 한다.", "응용 프로그램은 시스템 소프트웨어가 아닌 응용 소프트웨어에 해당한다.", "데이터 통신 시스템은 거리와 시간의 한계를 극복하여 원격지의 정보처리기기 사이의 효율적 정보교환을 지원한다.", "폭포수 모형은 사용자가 모든 요구사항을 명확하게 제시해야 합니다.", "소프트웨어 공학은 소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것입니다.", "정보공학 방법론에서 데이터베이스 설계의 표현으로 Entity-Relationship Diagram을 사용합니다.", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""], "subject": ["소프트웨어설계", "소프트웨어설계", "소프트웨어설계", "소프트웨어개발", "소프트웨어개발", "소프트웨어개발", "데이터베이스구축", "데이터베이스구축", "데이터베이스구축", "프로그래밍언어활용", "프로그래밍언어활용", "프로그래밍언어활용", "정보시스템구축관리", "정보시스템구축관리", "정보시스템구축관리", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반"], "wrong_question": [], "weak_type": [], "notes": [], "user_answer": [], "retrieve_answer": ""}
*3
$9
PEXPIREAT
$30
demo_user:teacher:local:shared
$13
1755996101453
*1
$4
EXEC
*1
$5
MULTI
*3
$3
SET
$30
demo_user:teacher:local:shared
$22522
{"question": ["소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기능은?", "데이터베이스 설계 단계 중 저장 레코드 양식 설계, 레코드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은?", "릴레이션의 차수가 4이고 카디널리티가 5이며, 릴레이션 S의 차수가 6이고 카디널리티가 7일 때 두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이션의 차수와 카디널리티는 얼마인가?", "운영체제의 종류에는 Windows, UNIX, Linux 등이 있습니다. 다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은?", "시스템 소프트웨어의 종류에는 운영체제, 언어 번역 프로그램, 매크로 프로세서, 링커, 라이브러리 등이 있습니다. 다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것으로, 소프트웨어 개발 전 과정에 지속적으로 작용할 수 있는 방법, 절차, 기법 등을 의미하는 것은?", "정보공학 방법론에서 데이터베이스 설계의 표현으로 사용하는 모델링 언어는?", "소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기 능 은?", "데이터 베 이스 설계 단계 중 저 장 레코 드 양식 설계, 레코 드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은?", "릴레이션의 차수가 4이고 카디널리티가 5이며, 릴레이션 S의 차수가 6이고 카디널리티가 7일 때 두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이션의 차수와 카디널리티는 얼마인가?", "운영체제의 종류 에는 Windows, UNIX, Linux 등 이 있습 니다. 다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은?", "시스템 소프트웨어의 종류에는 운영체제, 언어 번역 프로그램, 매크로 프로세서, 링커, 라이브러리 등이 있습니다. 다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것으로, 소프트웨어 개발 전 과정에 지속적으로 작용할 수 있는 방법, 절차, 기법 등을 의미하는 것은?", "정보공 학 방법론에서 데이터 베 이스 설계의 표 현으로 사용하는 모델 링 언 어는?", "소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기 능 은?", "데이터 베 이스 설계 단계 중 저 장 레코 드 양식 설계, 레코 드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은?", "릴레이션의 차수가 4이고 카디널리티가 5이며, 릴레이션 S의 차수가 6이고 카디널리티가 7일 때 두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이션의 차수와 카디널리티는 얼마인가?", "운영체제의 종류 에는 Windows, UNIX, Linux 등 이 있습 니다. 다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은?", "시스템 소프트웨어의 종류에는 운영체제, 언어 번역 프로그램, 매크로 프로세서, 링커, 라이브러리 등이 있습니다. 다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것으로, 소프트웨어 개발 전 과정에 지속적으로 작용할 수 있는 방법, 절차, 기법 등을 의미하는 것은?", "정보공 학 방법론에서 데이터 베 이스 설계의 표 현으로 사용하는 모델 링 언 어는?", "소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기 능 은?", "데이터 베 이스 설계 단계 중 저 장 레코 드 양식 설계, 레코 드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은?", "릴레이션의 차수가 4이고 카디널리티가 5이며, 릴레이션 S의 차수가 6이고 카디널리티가 7일 때 두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이션의 차수와 카디널리티는 얼마인가?", "운영체제의 종류 에는 Windows, UNIX, Linux 등 이 있습 니다. 다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은?", "시스템 소프트웨어의 종류에는 운영체제, 언어 번역 프로그램, 매크로 프로세서, 링커, 라이브러리 등이 있습니다. 다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것으로, 소프트웨어 개발 전 과정에 지속적으로 작용할 수 있는 방법, 절차, 기법 등을 의미하는 것은?", "정보공 학 방법론에서 데이터 베 이스 설계의 표 현으로 사용하는 모델 링 언 어는?"], "options": [["  1. 정적 구조", "  2. 동적 행위", "  3. 시스템 구조", "  4. 요구사항 분석"], ["  1. 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "  2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "  3. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "  4. 단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["  1. 요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "  2. 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "  3. 구조적 분석, 구조적 설계, 구현, 테스트", "  4. 구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["  1. 정의 단계", "  2. 개발 단계", "  3. 유지보수 단계", "  4. 설계 단계"], ["  1. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "  2. 모형의 적용 경험과 성공 사례가 많다.", "  3. 단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "  4. 각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["  1. 노드와 간선으로 구성된다.", "  2. 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "  3. 계층 모델이라고도 한다.", "  4. 3개의 서브시스템(모델, 뷰, 제어)으로 구성되어 있다."], ["  1. 데이터 조회", "  2. 데이터 조작", "  3. 데이터베이스 구조 정의", "  4. 데이터 보안"], ["  1. 요구 조건 분석", "  2. 개념적 설계", "  3. 논리적 설계", "  4. 물리적 설계"], ["  1. 10, 35", "  2. 24, 35", "  3. 10, 12", "  4. 24, 12"], ["  1. 다중 프로그래밍을 지원한다", "  2. 사용자 인터페이스를 제공한다", "  3. 하드웨어를 직접 제어한다", "  4. 컴퓨터의 자원을 효율적으로 관리한다"], ["  1. 제어 프로그램", "  2. 처리 프로그램", "  3. 응용 프로그램", "  4. 유틸리티 프로그램"], ["  1. 고속 ․ 고품질의 통신 서비스 제공", "  2. 고성능의 에러 제어 방식을 사용하여 시스템 신뢰도가 높음", "  3. 대형 컴퓨터의 공동 이용", "  4. 단거리 전송만 지원"], ["  1. 각 단계가 끝난 후 결과물이 명확히 나와야 함", "  2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어려움", "  3. 단계별 정의가 분명하고, 전체 공조의 이해가 용이", "  4. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["  1. 소프트웨어 공학", "  2. 정보공학 방법론", "  3. 구조적 방법론", "  4. 시스템 개발"], ["  1. Package Diagram", "  2. State Transition Diagram", "  3. Deployment Diagram", "  4. Entity-Relationship Diagram"], ["1. 정적 구조", "2. 동적 행위", "3. 시스템 구조", "4. 요구사항 분석"], ["1. 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "3. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "4. 단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "구조적 분석, 구조적 설계, 구현, 테스트", "구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["1. 정의 단계", "2. 개발 단계", "3. 유지보수 단계", "4. 설계 단계"], ["1. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "2. 모형의 적용 경험과 성공 사례가 많다.", "3. 단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "4. 각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["노드와 간선으로 구성된다.", "서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "계층 모델이라고도 한다.", "3개의 서브시스템(모델, 뷰 , 제어)으로 구성되어 있다."], ["데이터 조 회", "데이터 조작", "데이터 베 이스 구조 정의", "데이터 보 안"], ["1) 1. 요구 조 건 분석", "2) 2. 개 념 적 설계", "3) 3. 논 리적 설계", "4) 4. 물리적 설계"], ["10, 35", "24, 35", "10, 12", "24, 12"], ["1. 다중 프로그래밍을 지 원 한다", "2. 사용자 인 터 페 이스를 제공한다", "3. 하드웨어를 직접 제어한다", "4. 컴퓨 터의 자 원 을 효율 적으로 관리한다"], ["제어 프로그램", "처리 프로그램", "응용 프로그램", "유틸리티 프로그램"], ["고속 고품질의 통신 서비스 제공", "고성능의 에러 제어 방식으로 시스템 신뢰도가 높음", "대형 컴퓨터의 공동 이용", "단거리 전송만 지원"], ["1. 각 단계가 끝난 후 결과물이 명확히 나와야 함", "2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵움", "3. 단계별 정의가 분명하고, 전체 공조의 이해가 용이", "4. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["소프트웨어 공학", "정보공학 방법론", "구조적 방법론", "시스템 개발"], ["Package Diagram", "State Transition Diagram", "Deployment Diagram", "Entity-Relationship Diagram"], ["1. 정적 구조", "2. 동적 행위", "3. 시스템 구조", "4. 요구사항 분석"], ["1. 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "3. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "4. 단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "구조적 분석, 구조적 설계, 구현, 테스트", "구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["1. 정의 단계", "2. 개발 단계", "3. 유지보수 단계", "4. 설계 단계"], ["1. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "2. 모형의 적용 경험과 성공 사례가 많다.", "3. 단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "4. 각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["노드와 간선으로 구성된다.", "서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "계층 모델이라고도 한다.", "3개의 서브시스템(모델, 뷰 , 제어)으로 구성되어 있다."], ["데이터 조 회", "데이터 조작", "데이터 베 이스 구조 정의", "데이터 보 안"], ["1) 1. 요구 조 건 분석", "2) 2. 개 념 적 설계", "3) 3. 논 리적 설계", "4) 4. 물리적 설계"], ["10, 35", "24, 35", "10, 12", "24, 12"], ["1) 다중 프로그래밍을 지 원 한다", "2) 사용자 인 터 페 이스를 제공한다", "3) 하드웨어를 직접 제어한다", "4) 컴퓨 터의 자 원 을 효율 적으로 관리한다"], ["제어 프로그램", "처리 프로그램", "응용 프로그램", "유틸리티 프로그램"], ["고속 고품질의 통신 서비스 제공", "고성능의 에러 제어 방식을 사용하여 시스템 신뢰도가 높음", "대형 컴퓨터의 공동 이용", "단거리 전송만 지원"], ["각 단계가 끝난 후 결과물이 명확히 나와야 함", "개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵움", "단계별 정의가 분명하고, 전체 공조의 이해가 용이", "사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["소프트웨어 공학", "정보공학 방법론", "구조적 방법론", "시스템 개발"], ["Package Diagram", "State Transition Diagram", "Deployment Diagram", "Entity-Relationship Diagram"], ["1. 정적 구조", "2. 동적 행위", "3. 시스템 구조", "4. 요구사항 분석"], ["1. 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "3. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "4. 단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["1) 요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "2) 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "3) 구조적 분석, 구조적 설계, 구현, 테스트", "4) 구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["1. 정의 단계", "2. 개발 단계", "3. 유지보수 단계", "4. 설계 단계"], ["1. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "2. 모형의 적용 경험과 성공 사례가 많다.", "3. 단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "4. 각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["노드와 간선으로 구성된다.", "서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "계층 모델이라고도 한다.", "3개의 서브시스템(모델, 뷰 , 제어)으로 구성되어 있다."], ["데이터 조 회", "데이터 조작", "데이터 베 이스 구조 정의", "데이터 보 안"], ["1) 1. 요구 조 건 분석", "2) 2. 개 념 적 설계", "3) 3. 논 리적 설계", "4) 4. 물리적 설계"], ["10, 35", "24, 35", "10, 12", "24, 12"], ["다중 프로그래밍을 지 원 한다", "사용자 인 터 페 이스를 제공한다", "하드웨어를 직접 제어한다", "컴퓨 터의 자 원 을 효율 적으로 관리한다"], ["제어 프로그램", "처리 프로그램", "응용 프로그램", "유틸리티 프로그램"], ["고속 고품질의 통신 서비스 제공", "고성능의 에러 제어 방식을 사용하여 시스템 신뢰도가 높음", "대형 컴퓨터의 공동 이용", "단거리 전송만 지원"], ["각 단계가 끝난 후 결과물이 명확히 나와야 함", "개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵움", "단계별 정의가 분명하고, 전체 공조의 이해가 용이", "사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["소프트웨어 공학", "정보공학 방법론", "구조적 방법론", "시스템 개발"], ["Package Diagram", "State Transition Diagram", "Deployment Diagram", "Entity-Relationship Diagram"]], "answer": ["2", "1", "2", "3", "1", "2", "3", "3", "1", "3", "3", "4", "4", "1", "4", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""], "explanation": ["소프트웨어 아키텍처는 구성 요소들의 상호작용 및 관계, 각각의 특성을 정의합니다.", "폭포수 모형은 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없는 선형 순차적 모형입니다.", "구조적 방법론은 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍 단계로 구성됩니다.", "유지보수 단계는 소프트웨어를 직접 운용하며, 변경에 초점을 두고 여러 환경 변화에 따라 소프트웨어를 적응 및 유지시키는 단계로, 소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계입니다.", "폭포수 모형의 단점 중 하나는 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다는 것입니다.", "파이프 필터 형태의 소프트웨어 아키텍처는 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복하는 형태입니다.", "DDL은 데이터베이스의 구조를 정의, 변경, 삭제하는 데 사용되는 언어입니다.", "논리적 설계 단계에서는 저장 레코드 양식 설계, 레코드 집중의 분석 및 설계 접근 경로 설계 등이 포함됩니다.", "카티션 프로덕트의 결과로 생성되는 릴레이션의 차수는 두 릴레이션의 차수의 합이고, 카디널리티는 두 릴레이션의 카디널리티의 곱입니다.", "운영체제는 하드웨어를 직접 제어하는 것이 아니라, 하드웨어를 관리하고 제어하는 역할을 한다.", "응용 프로그램은 시스템 소프트웨어가 아닌 응용 소프트웨어에 해당한다.", "데이터 통신 시스템은 거리와 시간의 한계를 극복하여 원격지의 정보처리기기 사이의 효율적 정보교환을 지원한다.", "폭포수 모형은 사용자가 모든 요구사항을 명확하게 제시해야 합니다.", "소프트웨어 공학은 소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것입니다.", "정보공학 방법론에서 데이터베이스 설계의 표현으로 Entity-Relationship Diagram을 사용합니다.", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""], "subject": ["소프트웨어설계", "소프트웨어설계", "소프트웨어설계", "소프트웨어개발", "소프트웨어개발", "소프트웨어개발", "데이터베이스구축", "데이터베이스구축", "데이터베이스구축", "프로그래밍언어활용", "프로그래밍언어활용", "프로그래밍언어활용", "정보시스템구축관리", "정보시스템구축관리", "정보시스템구축관리", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반"], "wrong_question": [], "weak_type": [], "notes": [], "user_answer": [], "retrieve_answer": ""}
*3
$9
PEXPIREAT
$30
demo_user:teacher:local:shared
$13
1755996199782
*1
$4
EXEC
*1
$5
MULTI
*3
$3
SET
$30
demo_user:teacher:local:shared
$27178
{"question": ["소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기능은?", "데이터베이스 설계 단계 중 저장 레코드 양식 설계, 레코드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은?", "릴레이션의 차수가 4이고 카디널리티가 5이며, 릴레이션 S의 차수가 6이고 카디널리티가 7일 때 두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이션의 차수와 카디널리티는 얼마인가?", "운영체제의 종류에는 Windows, UNIX, Linux 등이 있습니다. 다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은?", "시스템 소프트웨어의 종류에는 운영체제, 언어 번역 프로그램, 매크로 프로세서, 링커, 라이브러리 등이 있습니다. 다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것으로, 소프트웨어 개발 전 과정에 지속적으로 작용할 수 있는 방법, 절차, 기법 등을 의미하는 것은?", "정보공학 방법론에서 데이터베이스 설계의 표현으로 사용하는 모델링 언어는?", "소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기 능 은?", "데이터 베 이스 설계 단계 중 저 장 레코 드 양식 설계, 레코 드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은?", "릴레이션의 차수가 4이고 카디널리티가 5이며, 릴레이션 S의 차수가 6이고 카디널리티가 7일 때 두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이션의 차수와 카디널리티는 얼마인가?", "운영체제의 종류 에는 Windows, UNIX, Linux 등 이 있습 니다. 다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은?", "시스템 소프트웨어의 종류에는 운영체제, 언어 번역 프로그램, 매크로 프로세서, 링커, 라이브러리 등이 있습니다. 다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것으로, 소프트웨어 개발 전 과정에 지속적으로 작용할 수 있는 방법, 절차, 기법 등을 의미하는 것은?", "정보공 학 방법론에서 데이터 베 이스 설계의 표 현으로 사용하는 모델 링 언 어는?", "소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기 능 은?", "데이터 베 이스 설계 단계 중 저 장 레코 드 양식 설계, 레코 드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은?", "릴레이션의 차수가 4이고 카디널리티가 5이며, 릴레이션 S의 차수가 6이고 카디널리티가 7일 때 두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이션의 차수와 카디널리티는 얼마인가?", "운영체제의 종류 에는 Windows, UNIX, Linux 등 이 있습 니다. 다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은?", "시스템 소프트웨어의 종류에는 운영체제, 언어 번역 프로그램, 매크로 프로세서, 링커, 라이브러리 등이 있습니다. 다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것으로, 소프트웨어 개발 전 과정에 지속적으로 작용할 수 있는 방법, 절차, 기법 등을 의미하는 것은?", "정보공 학 방법론에서 데이터 베 이스 설계의 표 현으로 사용하는 모델 링 언 어는?", "소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기 능 은?", "데이터 베 이스 설계 단계 중 저 장 레코 드 양식 설계, 레코 드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은?", "릴레이션의 차수가 4이고 카디널리티가 5이며, 릴레이션 S의 차수가 6이고 카디널리티가 7일 때 두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이션의 차수와 카디널리티는 얼마인가?", "운영체제의 종류 에는 Windows, UNIX, Linux 등 이 있습 니다. 다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은?", "시스템 소프트웨어의 종류에는 운영체제, 언어 번역 프로그램, 매크로 프로세서, 링커, 라이브러리 등이 있습니다. 다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것으로, 소프트웨어 개발 전 과정에 지속적으로 작용할 수 있는 방법, 절차, 기법 등을 의미하는 것은?", "정보공 학 방법론에서 데이터 베 이스 설계의 표 현으로 사용하는 모델 링 언 어는?", "소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기능은", "데이터 베 이스 설계 단계 중 저 장 레코 드 양식 설계, 레코 드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은", "릴레 이 션 의 차 수가4이고 카디널 리 티 가5이 며 , 릴레 이 션 S의 차 수가6이고 카디널 리 티 가7일 때 두 개의 릴레 이 션 을 카티션 프로 덕 트한 결과의 새로운 릴레 이 션 의 차 수와 카디널 리 티 는 얼마인 가?", "다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은", "다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공 학 원 리를 적용한 것으로, 소프트웨어 개발 전 과정에 지 속 적으로 작용할 수 있 는 방법, 절차 , 기법 등 을 의 미 하는 것은", "정보공 학 방법론에서 데이터 베 이스 설계의 표 현으로 사용하는 모델 링 언 어는?"], "options": [["  1. 정적 구조", "  2. 동적 행위", "  3. 시스템 구조", "  4. 요구사항 분석"], ["  1. 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "  2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "  3. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "  4. 단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["  1. 요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "  2. 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "  3. 구조적 분석, 구조적 설계, 구현, 테스트", "  4. 구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["  1. 정의 단계", "  2. 개발 단계", "  3. 유지보수 단계", "  4. 설계 단계"], ["  1. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "  2. 모형의 적용 경험과 성공 사례가 많다.", "  3. 단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "  4. 각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["  1. 노드와 간선으로 구성된다.", "  2. 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "  3. 계층 모델이라고도 한다.", "  4. 3개의 서브시스템(모델, 뷰, 제어)으로 구성되어 있다."], ["  1. 데이터 조회", "  2. 데이터 조작", "  3. 데이터베이스 구조 정의", "  4. 데이터 보안"], ["  1. 요구 조건 분석", "  2. 개념적 설계", "  3. 논리적 설계", "  4. 물리적 설계"], ["  1. 10, 35", "  2. 24, 35", "  3. 10, 12", "  4. 24, 12"], ["  1. 다중 프로그래밍을 지원한다", "  2. 사용자 인터페이스를 제공한다", "  3. 하드웨어를 직접 제어한다", "  4. 컴퓨터의 자원을 효율적으로 관리한다"], ["  1. 제어 프로그램", "  2. 처리 프로그램", "  3. 응용 프로그램", "  4. 유틸리티 프로그램"], ["  1. 고속 ․ 고품질의 통신 서비스 제공", "  2. 고성능의 에러 제어 방식을 사용하여 시스템 신뢰도가 높음", "  3. 대형 컴퓨터의 공동 이용", "  4. 단거리 전송만 지원"], ["  1. 각 단계가 끝난 후 결과물이 명확히 나와야 함", "  2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어려움", "  3. 단계별 정의가 분명하고, 전체 공조의 이해가 용이", "  4. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["  1. 소프트웨어 공학", "  2. 정보공학 방법론", "  3. 구조적 방법론", "  4. 시스템 개발"], ["  1. Package Diagram", "  2. State Transition Diagram", "  3. Deployment Diagram", "  4. Entity-Relationship Diagram"], ["1. 정적 구조", "2. 동적 행위", "3. 시스템 구조", "4. 요구사항 분석"], ["1. 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "3. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "4. 단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "구조적 분석, 구조적 설계, 구현, 테스트", "구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["1. 정의 단계", "2. 개발 단계", "3. 유지보수 단계", "4. 설계 단계"], ["1. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "2. 모형의 적용 경험과 성공 사례가 많다.", "3. 단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "4. 각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["노드와 간선으로 구성된다.", "서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "계층 모델이라고도 한다.", "3개의 서브시스템(모델, 뷰 , 제어)으로 구성되어 있다."], ["데이터 조 회", "데이터 조작", "데이터 베 이스 구조 정의", "데이터 보 안"], ["1) 1. 요구 조 건 분석", "2) 2. 개 념 적 설계", "3) 3. 논 리적 설계", "4) 4. 물리적 설계"], ["10, 35", "24, 35", "10, 12", "24, 12"], ["1. 다중 프로그래밍을 지 원 한다", "2. 사용자 인 터 페 이스를 제공한다", "3. 하드웨어를 직접 제어한다", "4. 컴퓨 터의 자 원 을 효율 적으로 관리한다"], ["제어 프로그램", "처리 프로그램", "응용 프로그램", "유틸리티 프로그램"], ["고속 고품질의 통신 서비스 제공", "고성능의 에러 제어 방식으로 시스템 신뢰도가 높음", "대형 컴퓨터의 공동 이용", "단거리 전송만 지원"], ["1. 각 단계가 끝난 후 결과물이 명확히 나와야 함", "2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵움", "3. 단계별 정의가 분명하고, 전체 공조의 이해가 용이", "4. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["소프트웨어 공학", "정보공학 방법론", "구조적 방법론", "시스템 개발"], ["Package Diagram", "State Transition Diagram", "Deployment Diagram", "Entity-Relationship Diagram"], ["1. 정적 구조", "2. 동적 행위", "3. 시스템 구조", "4. 요구사항 분석"], ["1. 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "3. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "4. 단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "구조적 분석, 구조적 설계, 구현, 테스트", "구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["1. 정의 단계", "2. 개발 단계", "3. 유지보수 단계", "4. 설계 단계"], ["1. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "2. 모형의 적용 경험과 성공 사례가 많다.", "3. 단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "4. 각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["노드와 간선으로 구성된다.", "서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "계층 모델이라고도 한다.", "3개의 서브시스템(모델, 뷰 , 제어)으로 구성되어 있다."], ["데이터 조 회", "데이터 조작", "데이터 베 이스 구조 정의", "데이터 보 안"], ["1) 1. 요구 조 건 분석", "2) 2. 개 념 적 설계", "3) 3. 논 리적 설계", "4) 4. 물리적 설계"], ["10, 35", "24, 35", "10, 12", "24, 12"], ["1) 다중 프로그래밍을 지 원 한다", "2) 사용자 인 터 페 이스를 제공한다", "3) 하드웨어를 직접 제어한다", "4) 컴퓨 터의 자 원 을 효율 적으로 관리한다"], ["제어 프로그램", "처리 프로그램", "응용 프로그램", "유틸리티 프로그램"], ["고속 고품질의 통신 서비스 제공", "고성능의 에러 제어 방식을 사용하여 시스템 신뢰도가 높음", "대형 컴퓨터의 공동 이용", "단거리 전송만 지원"], ["각 단계가 끝난 후 결과물이 명확히 나와야 함", "개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵움", "단계별 정의가 분명하고, 전체 공조의 이해가 용이", "사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["소프트웨어 공학", "정보공학 방법론", "구조적 방법론", "시스템 개발"], ["Package Diagram", "State Transition Diagram", "Deployment Diagram", "Entity-Relationship Diagram"], ["1. 정적 구조", "2. 동적 행위", "3. 시스템 구조", "4. 요구사항 분석"], ["1. 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "3. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "4. 단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["1) 요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "2) 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "3) 구조적 분석, 구조적 설계, 구현, 테스트", "4) 구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["1. 정의 단계", "2. 개발 단계", "3. 유지보수 단계", "4. 설계 단계"], ["1. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "2. 모형의 적용 경험과 성공 사례가 많다.", "3. 단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "4. 각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["노드와 간선으로 구성된다.", "서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "계층 모델이라고도 한다.", "3개의 서브시스템(모델, 뷰 , 제어)으로 구성되어 있다."], ["데이터 조 회", "데이터 조작", "데이터 베 이스 구조 정의", "데이터 보 안"], ["1) 1. 요구 조 건 분석", "2) 2. 개 념 적 설계", "3) 3. 논 리적 설계", "4) 4. 물리적 설계"], ["10, 35", "24, 35", "10, 12", "24, 12"], ["다중 프로그래밍을 지 원 한다", "사용자 인 터 페 이스를 제공한다", "하드웨어를 직접 제어한다", "컴퓨 터의 자 원 을 효율 적으로 관리한다"], ["제어 프로그램", "처리 프로그램", "응용 프로그램", "유틸리티 프로그램"], ["고속 고품질의 통신 서비스 제공", "고성능의 에러 제어 방식을 사용하여 시스템 신뢰도가 높음", "대형 컴퓨터의 공동 이용", "단거리 전송만 지원"], ["각 단계가 끝난 후 결과물이 명확히 나와야 함", "개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵움", "단계별 정의가 분명하고, 전체 공조의 이해가 용이", "사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["소프트웨어 공학", "정보공학 방법론", "구조적 방법론", "시스템 개발"], ["Package Diagram", "State Transition Diagram", "Deployment Diagram", "Entity-Relationship Diagram"], ["정적 구조", "동적 행위", "시스템 구조", "요구사항 분석"], ["각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "구조적 분석, 구조적 설계, 구현, 테스트", "구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["정의 단계", "개발 단계", "유지보수 단계", "설계 단계"], ["개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "모형의 적용 경험과 성공 사례가 많다.", "단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["노드와 간선으로 구성된다.", "서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "계층 모델이라고도 한다.", "3개의 서브시스템(모델, 뷰 , 제어)으로 구성되어 있다."], ["데이터 조회", "데이터 조작", "데이터베이스 구조 정의", "데이터 보안"], ["요구 조 건 분석", "개 념 적 설계", "논 리적 설계", "물리적 설계"], ["1.10,35", "2.24,35", "3.10,12", "4.24,12"], ["다중 프로그래밍을 지원한다", "사용자 인터페이스를 제공한다", "하드웨어를 직접 제어한다", "컴퓨터의 자원을 효율적으로 관리한다"], ["제어 프로그램", "처리 프로그램", "응용 프로그램", "유틸리티 프로그램"], ["고 속 고 품질 의 통신 서비스 제공", "고성 능 의 에 러 제어 방 식 을 사용하 여 시스템 신뢰 도가 높 음", "대형 컴퓨 터의 공동 이용", "단 거 리 전 송 만 지 원"], ["각 단계가 끝난 후 결과물이 명확히 나와야 함", "개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어 려움", "단계별 정의가 분명하고, 전체 공조의 이해가 용이", "사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["소프트웨어 공 학", "정보공 학 방법론", "구조적 방법론", "시스템 개발"], ["Package Diagram", "State Transition Diagram", "Deployment Diagram", "Entity-Relationship Diagram"]], "answer": ["2", "1", "2", "3", "1", "2", "3", "3", "1", "3", "3", "4", "4", "1", "4", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""], "explanation": ["소프트웨어 아키텍처는 구성 요소들의 상호작용 및 관계, 각각의 특성을 정의합니다.", "폭포수 모형은 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없는 선형 순차적 모형입니다.", "구조적 방법론은 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍 단계로 구성됩니다.", "유지보수 단계는 소프트웨어를 직접 운용하며, 변경에 초점을 두고 여러 환경 변화에 따라 소프트웨어를 적응 및 유지시키는 단계로, 소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계입니다.", "폭포수 모형의 단점 중 하나는 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다는 것입니다.", "파이프 필터 형태의 소프트웨어 아키텍처는 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복하는 형태입니다.", "DDL은 데이터베이스의 구조를 정의, 변경, 삭제하는 데 사용되는 언어입니다.", "논리적 설계 단계에서는 저장 레코드 양식 설계, 레코드 집중의 분석 및 설계 접근 경로 설계 등이 포함됩니다.", "카티션 프로덕트의 결과로 생성되는 릴레이션의 차수는 두 릴레이션의 차수의 합이고, 카디널리티는 두 릴레이션의 카디널리티의 곱입니다.", "운영체제는 하드웨어를 직접 제어하는 것이 아니라, 하드웨어를 관리하고 제어하는 역할을 한다.", "응용 프로그램은 시스템 소프트웨어가 아닌 응용 소프트웨어에 해당한다.", "데이터 통신 시스템은 거리와 시간의 한계를 극복하여 원격지의 정보처리기기 사이의 효율적 정보교환을 지원한다.", "폭포수 모형은 사용자가 모든 요구사항을 명확하게 제시해야 합니다.", "소프트웨어 공학은 소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것입니다.", "정보공학 방법론에서 데이터베이스 설계의 표현으로 Entity-Relationship Diagram을 사용합니다.", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""], "subject": ["소프트웨어설계", "소프트웨어설계", "소프트웨어설계", "소프트웨어개발", "소프트웨어개발", "소프트웨어개발", "데이터베이스구축", "데이터베이스구축", "데이터베이스구축", "프로그래밍언어활용", "프로그래밍언어활용", "프로그래밍언어활용", "정보시스템구축관리", "정보시스템구축관리", "정보시스템구축관리", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반"], "wrong_question": [], "weak_type": [], "notes": [], "user_answer": [], "retrieve_answer": ""}
*3
$9
PEXPIREAT
$30
demo_user:teacher:local:shared
$13
1755998442803
*1
$4
EXEC
*1
$5
MULTI
*3
$3
SET
$30
demo_user:teacher:local:shared
$35938
{"question": ["소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기능은?", "데이터베이스 설계 단계 중 저장 레코드 양식 설계, 레코드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은?", "릴레이션의 차수가 4이고 카디널리티가 5이며, 릴레이션 S의 차수가 6이고 카디널리티가 7일 때 두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이션의 차수와 카디널리티는 얼마인가?", "운영체제의 종류에는 Windows, UNIX, Linux 등이 있습니다. 다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은?", "시스템 소프트웨어의 종류에는 운영체제, 언어 번역 프로그램, 매크로 프로세서, 링커, 라이브러리 등이 있습니다. 다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것으로, 소프트웨어 개발 전 과정에 지속적으로 작용할 수 있는 방법, 절차, 기법 등을 의미하는 것은?", "정보공학 방법론에서 데이터베이스 설계의 표현으로 사용하는 모델링 언어는?", "소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기 능 은?", "데이터 베 이스 설계 단계 중 저 장 레코 드 양식 설계, 레코 드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은?", "릴레이션의 차수가 4이고 카디널리티가 5이며, 릴레이션 S의 차수가 6이고 카디널리티가 7일 때 두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이션의 차수와 카디널리티는 얼마인가?", "운영체제의 종류 에는 Windows, UNIX, Linux 등 이 있습 니다. 다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은?", "시스템 소프트웨어의 종류에는 운영체제, 언어 번역 프로그램, 매크로 프로세서, 링커, 라이브러리 등이 있습니다. 다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것으로, 소프트웨어 개발 전 과정에 지속적으로 작용할 수 있는 방법, 절차, 기법 등을 의미하는 것은?", "정보공 학 방법론에서 데이터 베 이스 설계의 표 현으로 사용하는 모델 링 언 어는?", "소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기 능 은?", "데이터 베 이스 설계 단계 중 저 장 레코 드 양식 설계, 레코 드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은?", "릴레이션의 차수가 4이고 카디널리티가 5이며, 릴레이션 S의 차수가 6이고 카디널리티가 7일 때 두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이션의 차수와 카디널리티는 얼마인가?", "운영체제의 종류 에는 Windows, UNIX, Linux 등 이 있습 니다. 다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은?", "시스템 소프트웨어의 종류에는 운영체제, 언어 번역 프로그램, 매크로 프로세서, 링커, 라이브러리 등이 있습니다. 다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것으로, 소프트웨어 개발 전 과정에 지속적으로 작용할 수 있는 방법, 절차, 기법 등을 의미하는 것은?", "정보공 학 방법론에서 데이터 베 이스 설계의 표 현으로 사용하는 모델 링 언 어는?", "소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기 능 은?", "데이터 베 이스 설계 단계 중 저 장 레코 드 양식 설계, 레코 드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은?", "릴레이션의 차수가 4이고 카디널리티가 5이며, 릴레이션 S의 차수가 6이고 카디널리티가 7일 때 두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이션의 차수와 카디널리티는 얼마인가?", "운영체제의 종류 에는 Windows, UNIX, Linux 등 이 있습 니다. 다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은?", "시스템 소프트웨어의 종류에는 운영체제, 언어 번역 프로그램, 매크로 프로세서, 링커, 라이브러리 등이 있습니다. 다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것으로, 소프트웨어 개발 전 과정에 지속적으로 작용할 수 있는 방법, 절차, 기법 등을 의미하는 것은?", "정보공 학 방법론에서 데이터 베 이스 설계의 표 현으로 사용하는 모델 링 언 어는?", "소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기능은", "데이터 베 이스 설계 단계 중 저 장 레코 드 양식 설계, 레코 드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은", "릴레 이 션 의 차 수가4이고 카디널 리 티 가5이 며 , 릴레 이 션 S의 차 수가6이고 카디널 리 티 가7일 때 두 개의 릴레 이 션 을 카티션 프로 덕 트한 결과의 새로운 릴레 이 션 의 차 수와 카디널 리 티 는 얼마인 가?", "다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은", "다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공 학 원 리를 적용한 것으로, 소프트웨어 개발 전 과정에 지 속 적으로 작용할 수 있 는 방법, 절차 , 기법 등 을 의 미 하는 것은", "정보공 학 방법론에서 데이터 베 이스 설계의 표 현으로 사용하는 모델 링 언 어는?", "1. 사용자 인터페이스(UI) 중 명령과 출력이 텍스트 형태로만 이루어지 는 인터페이스를 무엇이라 하는가?", "2. XP(eXtreme Programming)에 대한 설명으로 옳지 않은 것은?", "3. 자료 흐름도(Data Flow Diagram)의 구성 요소로 옳은 것은?", "4. 분산 시스템에서의 미들웨어(Middleware)와 관련한 설명으로 것은?", "5. 디자인 패턴 사용의 장٠단점에 대한 설명으로 거리가 먼 것은?", "6. UML 확장 모델에서 스테레오 타입 객체를 표현할 때 사용하는 기호로 맞는 것은? ① << >> ② (( )) ③ {{ }} ④ [[ ]] --- 페이지 2 왼쪽 --3회", "7. 소프트웨어 설계 시 구축된 플랫폼의 성능 특성 분석에 사용되는 측정 항목이 아닌 것은?", "8. 사용자의 요구사항을 정확히 파악하기 위해 실제 개발될 소프트웨어 에 대한 견본품을 만들어 최종 결과물을 예측하는 모형은?", "9. 객체지향 분석 방법론 중 Coad-Yourdon 방법에 해당하는 것은?", "10. 객체지향 기법에서 동일한 형의 특성을 갖는 객체들을 모아 구성한 것으로, 클래스들 사이의 ‘is instance of’ 관계로 설명되는 연관성을 나타내는 용어는?", "11. UML 모델에서 한 사물의 명세가 바뀌면 다른 사물에 영향을 주며, 일반적으로 한 클래스가 다른 클래스를 오퍼레이션의 매개 변수로 사용하는 경우에 나타나는 관계는?", "12. Rayleigh-Norden 곡선의 노력 분포도를 이용한 프로젝트 비용 산정 기법은?", "13. 애자일(Agile) 프로세스 모델에 대한 설명으로 틀린 것은?", "14. 객체지향 소프트웨어 설계 시 디자인 패턴을 구성하는 요소로서 가장 거리가 먼 것은?", "15. 아키텍처 설계 과정이 올바른 순서로 나열된 것은?", "16. 클래스(Class)에 대한 다음 설명에서 괄호(㉠, ㉡)에 들어갈 용어는? ㆍ클래스는 각각의 객체들이 갖는 ( ㉠ )과 ( ㉡ 표현함 ㆍ( ㉠ ) : 클래스의 상태나 정보를 표현함 ㆍ( ㉡ ) : 클래스가 수행할 수 있는 동작으로, (메소드, Method)라고도 함", "17. 폭포수 모형의 특징으로 거리가 먼 것은?", "18. CASE(Computer-Aided Software Engineering)의 원천 기술이 것은?", "19. 다음은 어떤 프로그램 구조를 나타낸다. 모듈 F에서의 fan-out의 수는 얼마인가?", "20. HIPO(Hierarchy Input Process Output)에 대한 설명으로 먼 것은?", "21. 반정규화(Denormalization) 유형 중 중복 테이블을 추가하는 방법에 해당하지 않는 것은?", "22. 외계인 코드(Alien Code)에 대한 설명으로 옳은 것은?", "23. 디지털 저작권 관리(DRM)의 기술 요소가 아닌 것은?", "24. 다음 트리의 차수(Degree)와 단말 노드(Terminal Node)의 수는?", "25. 물리데이터 저장소의 파티션 설계에서 파티션 유형으로 옳지 않은 것은?", "26. 형상 관리 도구의 주요 기능으로 거리가 먼 것은?", "27. 패키지 소프트웨어의 일반적인 제품 품질 요구사항 및 테스트를 위한 국제 표준은?", "28. 블랙박스 테스트 기법으로 거리가 먼 것은?", "29. 인터페이스 구현 검증 도구가 아닌 것은?"], "options": [["  1. 정적 구조", "  2. 동적 행위", "  3. 시스템 구조", "  4. 요구사항 분석"], ["  1. 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "  2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "  3. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "  4. 단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["  1. 요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "  2. 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "  3. 구조적 분석, 구조적 설계, 구현, 테스트", "  4. 구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["  1. 정의 단계", "  2. 개발 단계", "  3. 유지보수 단계", "  4. 설계 단계"], ["  1. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "  2. 모형의 적용 경험과 성공 사례가 많다.", "  3. 단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "  4. 각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["  1. 노드와 간선으로 구성된다.", "  2. 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "  3. 계층 모델이라고도 한다.", "  4. 3개의 서브시스템(모델, 뷰, 제어)으로 구성되어 있다."], ["  1. 데이터 조회", "  2. 데이터 조작", "  3. 데이터베이스 구조 정의", "  4. 데이터 보안"], ["  1. 요구 조건 분석", "  2. 개념적 설계", "  3. 논리적 설계", "  4. 물리적 설계"], ["  1. 10, 35", "  2. 24, 35", "  3. 10, 12", "  4. 24, 12"], ["  1. 다중 프로그래밍을 지원한다", "  2. 사용자 인터페이스를 제공한다", "  3. 하드웨어를 직접 제어한다", "  4. 컴퓨터의 자원을 효율적으로 관리한다"], ["  1. 제어 프로그램", "  2. 처리 프로그램", "  3. 응용 프로그램", "  4. 유틸리티 프로그램"], ["  1. 고속 ․ 고품질의 통신 서비스 제공", "  2. 고성능의 에러 제어 방식을 사용하여 시스템 신뢰도가 높음", "  3. 대형 컴퓨터의 공동 이용", "  4. 단거리 전송만 지원"], ["  1. 각 단계가 끝난 후 결과물이 명확히 나와야 함", "  2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어려움", "  3. 단계별 정의가 분명하고, 전체 공조의 이해가 용이", "  4. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["  1. 소프트웨어 공학", "  2. 정보공학 방법론", "  3. 구조적 방법론", "  4. 시스템 개발"], ["  1. Package Diagram", "  2. State Transition Diagram", "  3. Deployment Diagram", "  4. Entity-Relationship Diagram"], ["1. 정적 구조", "2. 동적 행위", "3. 시스템 구조", "4. 요구사항 분석"], ["1. 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "3. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "4. 단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "구조적 분석, 구조적 설계, 구현, 테스트", "구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["1. 정의 단계", "2. 개발 단계", "3. 유지보수 단계", "4. 설계 단계"], ["1. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "2. 모형의 적용 경험과 성공 사례가 많다.", "3. 단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "4. 각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["노드와 간선으로 구성된다.", "서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "계층 모델이라고도 한다.", "3개의 서브시스템(모델, 뷰 , 제어)으로 구성되어 있다."], ["데이터 조 회", "데이터 조작", "데이터 베 이스 구조 정의", "데이터 보 안"], ["1) 1. 요구 조 건 분석", "2) 2. 개 념 적 설계", "3) 3. 논 리적 설계", "4) 4. 물리적 설계"], ["10, 35", "24, 35", "10, 12", "24, 12"], ["1. 다중 프로그래밍을 지 원 한다", "2. 사용자 인 터 페 이스를 제공한다", "3. 하드웨어를 직접 제어한다", "4. 컴퓨 터의 자 원 을 효율 적으로 관리한다"], ["제어 프로그램", "처리 프로그램", "응용 프로그램", "유틸리티 프로그램"], ["고속 고품질의 통신 서비스 제공", "고성능의 에러 제어 방식으로 시스템 신뢰도가 높음", "대형 컴퓨터의 공동 이용", "단거리 전송만 지원"], ["1. 각 단계가 끝난 후 결과물이 명확히 나와야 함", "2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵움", "3. 단계별 정의가 분명하고, 전체 공조의 이해가 용이", "4. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["소프트웨어 공학", "정보공학 방법론", "구조적 방법론", "시스템 개발"], ["Package Diagram", "State Transition Diagram", "Deployment Diagram", "Entity-Relationship Diagram"], ["1. 정적 구조", "2. 동적 행위", "3. 시스템 구조", "4. 요구사항 분석"], ["1. 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "3. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "4. 단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "구조적 분석, 구조적 설계, 구현, 테스트", "구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["1. 정의 단계", "2. 개발 단계", "3. 유지보수 단계", "4. 설계 단계"], ["1. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "2. 모형의 적용 경험과 성공 사례가 많다.", "3. 단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "4. 각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["노드와 간선으로 구성된다.", "서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "계층 모델이라고도 한다.", "3개의 서브시스템(모델, 뷰 , 제어)으로 구성되어 있다."], ["데이터 조 회", "데이터 조작", "데이터 베 이스 구조 정의", "데이터 보 안"], ["1) 1. 요구 조 건 분석", "2) 2. 개 념 적 설계", "3) 3. 논 리적 설계", "4) 4. 물리적 설계"], ["10, 35", "24, 35", "10, 12", "24, 12"], ["1) 다중 프로그래밍을 지 원 한다", "2) 사용자 인 터 페 이스를 제공한다", "3) 하드웨어를 직접 제어한다", "4) 컴퓨 터의 자 원 을 효율 적으로 관리한다"], ["제어 프로그램", "처리 프로그램", "응용 프로그램", "유틸리티 프로그램"], ["고속 고품질의 통신 서비스 제공", "고성능의 에러 제어 방식을 사용하여 시스템 신뢰도가 높음", "대형 컴퓨터의 공동 이용", "단거리 전송만 지원"], ["각 단계가 끝난 후 결과물이 명확히 나와야 함", "개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵움", "단계별 정의가 분명하고, 전체 공조의 이해가 용이", "사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["소프트웨어 공학", "정보공학 방법론", "구조적 방법론", "시스템 개발"], ["Package Diagram", "State Transition Diagram", "Deployment Diagram", "Entity-Relationship Diagram"], ["1. 정적 구조", "2. 동적 행위", "3. 시스템 구조", "4. 요구사항 분석"], ["1. 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "3. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "4. 단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["1) 요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "2) 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "3) 구조적 분석, 구조적 설계, 구현, 테스트", "4) 구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["1. 정의 단계", "2. 개발 단계", "3. 유지보수 단계", "4. 설계 단계"], ["1. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "2. 모형의 적용 경험과 성공 사례가 많다.", "3. 단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "4. 각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["노드와 간선으로 구성된다.", "서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "계층 모델이라고도 한다.", "3개의 서브시스템(모델, 뷰 , 제어)으로 구성되어 있다."], ["데이터 조 회", "데이터 조작", "데이터 베 이스 구조 정의", "데이터 보 안"], ["1) 1. 요구 조 건 분석", "2) 2. 개 념 적 설계", "3) 3. 논 리적 설계", "4) 4. 물리적 설계"], ["10, 35", "24, 35", "10, 12", "24, 12"], ["다중 프로그래밍을 지 원 한다", "사용자 인 터 페 이스를 제공한다", "하드웨어를 직접 제어한다", "컴퓨 터의 자 원 을 효율 적으로 관리한다"], ["제어 프로그램", "처리 프로그램", "응용 프로그램", "유틸리티 프로그램"], ["고속 고품질의 통신 서비스 제공", "고성능의 에러 제어 방식을 사용하여 시스템 신뢰도가 높음", "대형 컴퓨터의 공동 이용", "단거리 전송만 지원"], ["각 단계가 끝난 후 결과물이 명확히 나와야 함", "개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵움", "단계별 정의가 분명하고, 전체 공조의 이해가 용이", "사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["소프트웨어 공학", "정보공학 방법론", "구조적 방법론", "시스템 개발"], ["Package Diagram", "State Transition Diagram", "Deployment Diagram", "Entity-Relationship Diagram"], ["정적 구조", "동적 행위", "시스템 구조", "요구사항 분석"], ["각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "구조적 분석, 구조적 설계, 구현, 테스트", "구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["정의 단계", "개발 단계", "유지보수 단계", "설계 단계"], ["개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "모형의 적용 경험과 성공 사례가 많다.", "단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["노드와 간선으로 구성된다.", "서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "계층 모델이라고도 한다.", "3개의 서브시스템(모델, 뷰 , 제어)으로 구성되어 있다."], ["데이터 조회", "데이터 조작", "데이터베이스 구조 정의", "데이터 보안"], ["요구 조 건 분석", "개 념 적 설계", "논 리적 설계", "물리적 설계"], ["1.10,35", "2.24,35", "3.10,12", "4.24,12"], ["다중 프로그래밍을 지원한다", "사용자 인터페이스를 제공한다", "하드웨어를 직접 제어한다", "컴퓨터의 자원을 효율적으로 관리한다"], ["제어 프로그램", "처리 프로그램", "응용 프로그램", "유틸리티 프로그램"], ["고 속 고 품질 의 통신 서비스 제공", "고성 능 의 에 러 제어 방 식 을 사용하 여 시스템 신뢰 도가 높 음", "대형 컴퓨 터의 공동 이용", "단 거 리 전 송 만 지 원"], ["각 단계가 끝난 후 결과물이 명확히 나와야 함", "개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어 려움", "단계별 정의가 분명하고, 전체 공조의 이해가 용이", "사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["소프트웨어 공 학", "정보공 학 방법론", "구조적 방법론", "시스템 개발"], ["Package Diagram", "State Transition Diagram", "Deployment Diagram", "Entity-Relationship Diagram"], ["NUI", "GUI", "CLI", "OUI"], ["릴리즈 기간을 짧게 반복하여 고객의 요구 변화에 빠르게 한다.", "코드들은 하나의 작업이 마무리될 때마다 지속적으로 통합한다.", "테스트가 지속적으로 진행될 수 있도록 테스트 자동화 도구를 사용한다.", "개발 책임자가 모든 책임을 가지므로 팀원들은 책임 없이 로운 개발이 가능하다."], ["process, data flow, data store, comment", "process, data flow, data store, terminator", "data flow, data store, terminator, data dictionary", "process, data store, terminator, mini-spec"], ["분산 시스템에서 다양한 부분을 관리하고 통신하며 데이터를 교환하게 해주는 소프트웨어로 볼 수 있다.", "위치 투명성(Location Transparency)을 제공한다.", "분산 시스템의 여러 컴포넌트가 요구하는 재사용 가능한 스의 구현을 제공한다.", "애플리케이션과 사용자 사이에서만 분산 서비스를 제공한다."], ["소프트웨어 구조 파악이 용이하다.", "객체지향 설계 및 구현의 생산성을 높이는데 적합하다.", "재사용을 위한 개발 시간이 단축된다.", "절차형 언어와 함께 이용될 때 효율이 극대화된다."], ["UML 확장 모델에서 스테레오 타입 객체를 표현할 때 사용하는 기호로 맞는 것은? ① << >> ② (( )) ③ {{ }} ④ [[ ]] --- 페이지 2 왼쪽 --3회", "UML 확장 모델에서 스테레오 타입 객체를 표현할 때 사용하는 기호로 맞는 것은?", "<< >>", "(( ))"], ["응답 시간(Response Time)", "서버 튜닝(Server Tuning)", "가용성(Availability)", "사용률(Utilization)"], ["나선형 모형", "애자일 모형", "프로토타입 모형", "폭포수 모형"], ["E-R 다이어그램을 사용하여 객체의 행위를 데이터 모델링하는 데 초점을 둔 방법이다.", "객체, 동적, 기능 모델로 나누어 수행하는 방법이다.", "미시적 개발 프로세스와 거시적 개발 프로세스를 모두 사용하는 방법이다.", "Use-Case를 강조하여 사용하는 방법이다."], ["일반화", "분류화", "연관화", "집단화"], ["Association", "Dependency", "Realization", "Generalization"], ["Putnam 모형", "델파이 모형", "COCOMO 모형", "기능점수 모형"], ["변화에 대한 대응보다는 자세한 계획을 중심으로 소프트웨어 를 개발한다.", "프로세스와 도구 중심이 아닌 개개인과의 상호소통을 통해 의 견을 수렴한다.", "협상과 계약보다는 고객과의 협력을 중시한다.", "문서 중심이 아닌, 실행 가능한 소프트웨어를 중시한다."], ["실제 적용된 사례", "문제 및 배경", "개발자의 성명", "재사용 가능한 샘플코드"], ["㉮ → ㉯ → ㉰ → ㉱ → ㉲", "㉲ → ㉮ → ㉯ → ㉱ → ㉰", "㉮ → ㉲ → ㉯ → ㉱ → ㉰", "㉮ → ㉯ → ㉰ → ㉲ → ㉱"], ["㉠-제약조건, ㉡-속성", "㉠-속성, ㉡-오퍼레이션", "㉠-오퍼레이션, ㉡-제약조건", "㉠-속성, ㉡-관계"], ["순차적인 접근방법을 이용한다.", "나선형 모형의 단점을 보완하기 위한 모형이다.", "단계적 정의와 산출물이 명확하다.", "모형의 적용 경험과 성공사례가 많다."], ["구조적 기법", "프로토타이핑 기술", "정보 저장소 기술", "일괄처리 기술"], ["fan-in :2, fan-out :3", "fan-in :3, fan-out :2", "fan-in :1, fan-out :2", "fan-in :2, fan-out :1"], ["상향식 소프트웨어 개발을 위한 문서화 도구이다.", "HIPO 차트 종류에는 가시적 도표, 총체적 도표, 세부적 있다.", "기능과 자료의 의존 관계를 동시에 표현할 수 있다.", "보기 쉽고 이해하기 쉽다."], ["빌드 테이블의 추가", "집계 테이블의 추가", "진행 테이블의 추가", "특정 부분만을 포함하는 테이블 추가"], ["프로그램의 로직이 복잡하여 이해하기 어려운 프로그램을 의미한다.", "아주 오래되거나 참고문서 또는 개발자가 없어 유지보수 작업이 어려운 프로그램을 의미한다.", "오류가 없어 디버깅 과정이 필요 없는 프로그램을 의미한다.", "사용자가 직접 작성한 프로그램을 의미한다."], ["크랙 방지 기술", "정책 관리 기술", "암호화 기술", "방화벽 기술"], ["차수 :4, 단말 노드 :4", "차수 :2, 단말 노드 :4", "차수 :4, 단말 노드 :8", "차수 :2, 단말 노드 :8"], ["범위 분할(Range Partitioning)", "해시 분할(Hash Partitioning)", "조합 분할(Composite Partitioning)", "유닛 분할(Unit Partitioning)"], ["정규화(Normalization)", "체크인(Check-in)", "체크아웃(Check-out)", "커밋(commit)"], ["ISO/IEC 2196", "IEEE 19554", "ISO/IEC 12119", "ISO/IEC 14959"], ["기초 경로 검사", "동치 클래스 분해", "경계값 분석", "원인 결과 그래프"], ["ESB", "xUnit", "STAF", "NTAF"]], "answer": ["2", "1", "2", "3", "1", "2", "3", "3", "1", "3", "3", "4", "4", "1", "4", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""], "explanation": ["소프트웨어 아키텍처는 구성 요소들의 상호작용 및 관계, 각각의 특성을 정의합니다.", "폭포수 모형은 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없는 선형 순차적 모형입니다.", "구조적 방법론은 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍 단계로 구성됩니다.", "유지보수 단계는 소프트웨어를 직접 운용하며, 변경에 초점을 두고 여러 환경 변화에 따라 소프트웨어를 적응 및 유지시키는 단계로, 소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계입니다.", "폭포수 모형의 단점 중 하나는 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다는 것입니다.", "파이프 필터 형태의 소프트웨어 아키텍처는 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복하는 형태입니다.", "DDL은 데이터베이스의 구조를 정의, 변경, 삭제하는 데 사용되는 언어입니다.", "논리적 설계 단계에서는 저장 레코드 양식 설계, 레코드 집중의 분석 및 설계 접근 경로 설계 등이 포함됩니다.", "카티션 프로덕트의 결과로 생성되는 릴레이션의 차수는 두 릴레이션의 차수의 합이고, 카디널리티는 두 릴레이션의 카디널리티의 곱입니다.", "운영체제는 하드웨어를 직접 제어하는 것이 아니라, 하드웨어를 관리하고 제어하는 역할을 한다.", "응용 프로그램은 시스템 소프트웨어가 아닌 응용 소프트웨어에 해당한다.", "데이터 통신 시스템은 거리와 시간의 한계를 극복하여 원격지의 정보처리기기 사이의 효율적 정보교환을 지원한다.", "폭포수 모형은 사용자가 모든 요구사항을 명확하게 제시해야 합니다.", "소프트웨어 공학은 소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것입니다.", "정보공학 방법론에서 데이터베이스 설계의 표현으로 Entity-Relationship Diagram을 사용합니다.", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""], "subject": ["소프트웨어설계", "소프트웨어설계", "소프트웨어설계", "소프트웨어개발", "소프트웨어개발", "소프트웨어개발", "데이터베이스구축", "데이터베이스구축", "데이터베이스구축", "프로그래밍언어활용", "프로그래밍언어활용", "프로그래밍언어활용", "정보시스템구축관리", "정보시스템구축관리", "정보시스템구축관리", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반"], "wrong_question": [], "weak_type": [], "notes": [], "user_answer": [], "retrieve_answer": ""}
*3
$9
PEXPIREAT
$30
demo_user:teacher:local:shared
$13
1755998486034
*1
$4
EXEC
*1
$5
MULTI
*3
$3
SET
$30
demo_user:teacher:local:shared
$40595
{"question": ["소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기능은?", "데이터베이스 설계 단계 중 저장 레코드 양식 설계, 레코드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은?", "릴레이션의 차수가 4이고 카디널리티가 5이며, 릴레이션 S의 차수가 6이고 카디널리티가 7일 때 두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이션의 차수와 카디널리티는 얼마인가?", "운영체제의 종류에는 Windows, UNIX, Linux 등이 있습니다. 다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은?", "시스템 소프트웨어의 종류에는 운영체제, 언어 번역 프로그램, 매크로 프로세서, 링커, 라이브러리 등이 있습니다. 다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것으로, 소프트웨어 개발 전 과정에 지속적으로 작용할 수 있는 방법, 절차, 기법 등을 의미하는 것은?", "정보공학 방법론에서 데이터베이스 설계의 표현으로 사용하는 모델링 언어는?", "소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기 능 은?", "데이터 베 이스 설계 단계 중 저 장 레코 드 양식 설계, 레코 드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은?", "릴레이션의 차수가 4이고 카디널리티가 5이며, 릴레이션 S의 차수가 6이고 카디널리티가 7일 때 두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이션의 차수와 카디널리티는 얼마인가?", "운영체제의 종류 에는 Windows, UNIX, Linux 등 이 있습 니다. 다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은?", "시스템 소프트웨어의 종류에는 운영체제, 언어 번역 프로그램, 매크로 프로세서, 링커, 라이브러리 등이 있습니다. 다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것으로, 소프트웨어 개발 전 과정에 지속적으로 작용할 수 있는 방법, 절차, 기법 등을 의미하는 것은?", "정보공 학 방법론에서 데이터 베 이스 설계의 표 현으로 사용하는 모델 링 언 어는?", "소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기 능 은?", "데이터 베 이스 설계 단계 중 저 장 레코 드 양식 설계, 레코 드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은?", "릴레이션의 차수가 4이고 카디널리티가 5이며, 릴레이션 S의 차수가 6이고 카디널리티가 7일 때 두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이션의 차수와 카디널리티는 얼마인가?", "운영체제의 종류 에는 Windows, UNIX, Linux 등 이 있습 니다. 다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은?", "시스템 소프트웨어의 종류에는 운영체제, 언어 번역 프로그램, 매크로 프로세서, 링커, 라이브러리 등이 있습니다. 다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것으로, 소프트웨어 개발 전 과정에 지속적으로 작용할 수 있는 방법, 절차, 기법 등을 의미하는 것은?", "정보공 학 방법론에서 데이터 베 이스 설계의 표 현으로 사용하는 모델 링 언 어는?", "소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기 능 은?", "데이터 베 이스 설계 단계 중 저 장 레코 드 양식 설계, 레코 드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은?", "릴레이션의 차수가 4이고 카디널리티가 5이며, 릴레이션 S의 차수가 6이고 카디널리티가 7일 때 두 개의 릴레이션을 카티션 프로덕트한 결과의 새로운 릴레이션의 차수와 카디널리티는 얼마인가?", "운영체제의 종류 에는 Windows, UNIX, Linux 등 이 있습 니다. 다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은?", "시스템 소프트웨어의 종류에는 운영체제, 언어 번역 프로그램, 매크로 프로세서, 링커, 라이브러리 등이 있습니다. 다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것으로, 소프트웨어 개발 전 과정에 지속적으로 작용할 수 있는 방법, 절차, 기법 등을 의미하는 것은?", "정보공 학 방법론에서 데이터 베 이스 설계의 표 현으로 사용하는 모델 링 언 어는?", "소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기능은", "데이터 베 이스 설계 단계 중 저 장 레코 드 양식 설계, 레코 드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은", "릴레 이 션 의 차 수가4이고 카디널 리 티 가5이 며 , 릴레 이 션 S의 차 수가6이고 카디널 리 티 가7일 때 두 개의 릴레 이 션 을 카티션 프로 덕 트한 결과의 새로운 릴레 이 션 의 차 수와 카디널 리 티 는 얼마인 가?", "다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은", "다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공 학 원 리를 적용한 것으로, 소프트웨어 개발 전 과정에 지 속 적으로 작용할 수 있 는 방법, 절차 , 기법 등 을 의 미 하는 것은", "정보공 학 방법론에서 데이터 베 이스 설계의 표 현으로 사용하는 모델 링 언 어는?", "1. 사용자 인터페이스(UI) 중 명령과 출력이 텍스트 형태로만 이루어지 는 인터페이스를 무엇이라 하는가?", "2. XP(eXtreme Programming)에 대한 설명으로 옳지 않은 것은?", "3. 자료 흐름도(Data Flow Diagram)의 구성 요소로 옳은 것은?", "4. 분산 시스템에서의 미들웨어(Middleware)와 관련한 설명으로 것은?", "5. 디자인 패턴 사용의 장٠단점에 대한 설명으로 거리가 먼 것은?", "6. UML 확장 모델에서 스테레오 타입 객체를 표현할 때 사용하는 기호로 맞는 것은? ① << >> ② (( )) ③ {{ }} ④ [[ ]] --- 페이지 2 왼쪽 --3회", "7. 소프트웨어 설계 시 구축된 플랫폼의 성능 특성 분석에 사용되는 측정 항목이 아닌 것은?", "8. 사용자의 요구사항을 정확히 파악하기 위해 실제 개발될 소프트웨어 에 대한 견본품을 만들어 최종 결과물을 예측하는 모형은?", "9. 객체지향 분석 방법론 중 Coad-Yourdon 방법에 해당하는 것은?", "10. 객체지향 기법에서 동일한 형의 특성을 갖는 객체들을 모아 구성한 것으로, 클래스들 사이의 ‘is instance of’ 관계로 설명되는 연관성을 나타내는 용어는?", "11. UML 모델에서 한 사물의 명세가 바뀌면 다른 사물에 영향을 주며, 일반적으로 한 클래스가 다른 클래스를 오퍼레이션의 매개 변수로 사용하는 경우에 나타나는 관계는?", "12. Rayleigh-Norden 곡선의 노력 분포도를 이용한 프로젝트 비용 산정 기법은?", "13. 애자일(Agile) 프로세스 모델에 대한 설명으로 틀린 것은?", "14. 객체지향 소프트웨어 설계 시 디자인 패턴을 구성하는 요소로서 가장 거리가 먼 것은?", "15. 아키텍처 설계 과정이 올바른 순서로 나열된 것은?", "16. 클래스(Class)에 대한 다음 설명에서 괄호(㉠, ㉡)에 들어갈 용어는? ㆍ클래스는 각각의 객체들이 갖는 ( ㉠ )과 ( ㉡ 표현함 ㆍ( ㉠ ) : 클래스의 상태나 정보를 표현함 ㆍ( ㉡ ) : 클래스가 수행할 수 있는 동작으로, (메소드, Method)라고도 함", "17. 폭포수 모형의 특징으로 거리가 먼 것은?", "18. CASE(Computer-Aided Software Engineering)의 원천 기술이 것은?", "19. 다음은 어떤 프로그램 구조를 나타낸다. 모듈 F에서의 fan-out의 수는 얼마인가?", "20. HIPO(Hierarchy Input Process Output)에 대한 설명으로 먼 것은?", "21. 반정규화(Denormalization) 유형 중 중복 테이블을 추가하는 방법에 해당하지 않는 것은?", "22. 외계인 코드(Alien Code)에 대한 설명으로 옳은 것은?", "23. 디지털 저작권 관리(DRM)의 기술 요소가 아닌 것은?", "24. 다음 트리의 차수(Degree)와 단말 노드(Terminal Node)의 수는?", "25. 물리데이터 저장소의 파티션 설계에서 파티션 유형으로 옳지 않은 것은?", "26. 형상 관리 도구의 주요 기능으로 거리가 먼 것은?", "27. 패키지 소프트웨어의 일반적인 제품 품질 요구사항 및 테스트를 위한 국제 표준은?", "28. 블랙박스 테스트 기법으로 거리가 먼 것은?", "29. 인터페이스 구현 검증 도구가 아닌 것은?", "소프트웨어 아키텍처의 구성 요소들 간의 상호작용 및 관계를 정의하는 것은 무엇입니까?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징은 무엇입니까?", "구조적 방법론의 단계로 올바르게 나열된 것은 무엇입니까?", "소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?", "다음 중 폭포수 모형의 단점으로 옳은 것은?", "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?", "DDL(Data Definition Language)의 주요 기능은?", "데이터 베 이스 설계 단계 중 저 장 레코 드 양식 설계, 레코 드 집중의 분석 및 설계 접근 경로 설계와 관계되는 것은", "릴레 이 션 의 차 수가4이고 카디널 리 티 가5이 며 , 릴레 이 션 S의 차 수가6이고 카디널 리 티 가7일 때 두 개의 릴레 이 션 을 카티션 프로 덕 트한 결과의 새로운 릴레 이 션 의 차 수와 카디널 리 티 는 얼마인 가?", "다음 중 운영체제의 특징을 설명한 것으로 옳지 않은 것은", "다음 중 시스템 소프트웨어의 구성 요소가 아닌 것은?", "데이터 통신 시스템의 특징으로 옳지 않은 것은?", "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?", "소프트웨어 개발 생명주기에 소프트웨어 공 학 원 리를 적용한 것으로, 소프트웨어 개발 전 과정에 지 속 적으로 작용할 수 있 는 방법, 절차 , 기법 등 을 의 미 하는 것은", "정보공 학 방법론에서 데이터 베 이스 설계의 표 현으로 사용하는 모델 링 언 어는?"], "options": [["  1. 정적 구조", "  2. 동적 행위", "  3. 시스템 구조", "  4. 요구사항 분석"], ["  1. 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "  2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "  3. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "  4. 단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["  1. 요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "  2. 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "  3. 구조적 분석, 구조적 설계, 구현, 테스트", "  4. 구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["  1. 정의 단계", "  2. 개발 단계", "  3. 유지보수 단계", "  4. 설계 단계"], ["  1. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "  2. 모형의 적용 경험과 성공 사례가 많다.", "  3. 단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "  4. 각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["  1. 노드와 간선으로 구성된다.", "  2. 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "  3. 계층 모델이라고도 한다.", "  4. 3개의 서브시스템(모델, 뷰, 제어)으로 구성되어 있다."], ["  1. 데이터 조회", "  2. 데이터 조작", "  3. 데이터베이스 구조 정의", "  4. 데이터 보안"], ["  1. 요구 조건 분석", "  2. 개념적 설계", "  3. 논리적 설계", "  4. 물리적 설계"], ["  1. 10, 35", "  2. 24, 35", "  3. 10, 12", "  4. 24, 12"], ["  1. 다중 프로그래밍을 지원한다", "  2. 사용자 인터페이스를 제공한다", "  3. 하드웨어를 직접 제어한다", "  4. 컴퓨터의 자원을 효율적으로 관리한다"], ["  1. 제어 프로그램", "  2. 처리 프로그램", "  3. 응용 프로그램", "  4. 유틸리티 프로그램"], ["  1. 고속 ․ 고품질의 통신 서비스 제공", "  2. 고성능의 에러 제어 방식을 사용하여 시스템 신뢰도가 높음", "  3. 대형 컴퓨터의 공동 이용", "  4. 단거리 전송만 지원"], ["  1. 각 단계가 끝난 후 결과물이 명확히 나와야 함", "  2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어려움", "  3. 단계별 정의가 분명하고, 전체 공조의 이해가 용이", "  4. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["  1. 소프트웨어 공학", "  2. 정보공학 방법론", "  3. 구조적 방법론", "  4. 시스템 개발"], ["  1. Package Diagram", "  2. State Transition Diagram", "  3. Deployment Diagram", "  4. Entity-Relationship Diagram"], ["1. 정적 구조", "2. 동적 행위", "3. 시스템 구조", "4. 요구사항 분석"], ["1. 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "3. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "4. 단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "구조적 분석, 구조적 설계, 구현, 테스트", "구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["1. 정의 단계", "2. 개발 단계", "3. 유지보수 단계", "4. 설계 단계"], ["1. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "2. 모형의 적용 경험과 성공 사례가 많다.", "3. 단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "4. 각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["노드와 간선으로 구성된다.", "서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "계층 모델이라고도 한다.", "3개의 서브시스템(모델, 뷰 , 제어)으로 구성되어 있다."], ["데이터 조 회", "데이터 조작", "데이터 베 이스 구조 정의", "데이터 보 안"], ["1) 1. 요구 조 건 분석", "2) 2. 개 념 적 설계", "3) 3. 논 리적 설계", "4) 4. 물리적 설계"], ["10, 35", "24, 35", "10, 12", "24, 12"], ["1. 다중 프로그래밍을 지 원 한다", "2. 사용자 인 터 페 이스를 제공한다", "3. 하드웨어를 직접 제어한다", "4. 컴퓨 터의 자 원 을 효율 적으로 관리한다"], ["제어 프로그램", "처리 프로그램", "응용 프로그램", "유틸리티 프로그램"], ["고속 고품질의 통신 서비스 제공", "고성능의 에러 제어 방식으로 시스템 신뢰도가 높음", "대형 컴퓨터의 공동 이용", "단거리 전송만 지원"], ["1. 각 단계가 끝난 후 결과물이 명확히 나와야 함", "2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵움", "3. 단계별 정의가 분명하고, 전체 공조의 이해가 용이", "4. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["소프트웨어 공학", "정보공학 방법론", "구조적 방법론", "시스템 개발"], ["Package Diagram", "State Transition Diagram", "Deployment Diagram", "Entity-Relationship Diagram"], ["1. 정적 구조", "2. 동적 행위", "3. 시스템 구조", "4. 요구사항 분석"], ["1. 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "3. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "4. 단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "구조적 분석, 구조적 설계, 구현, 테스트", "구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["1. 정의 단계", "2. 개발 단계", "3. 유지보수 단계", "4. 설계 단계"], ["1. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "2. 모형의 적용 경험과 성공 사례가 많다.", "3. 단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "4. 각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["노드와 간선으로 구성된다.", "서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "계층 모델이라고도 한다.", "3개의 서브시스템(모델, 뷰 , 제어)으로 구성되어 있다."], ["데이터 조 회", "데이터 조작", "데이터 베 이스 구조 정의", "데이터 보 안"], ["1) 1. 요구 조 건 분석", "2) 2. 개 념 적 설계", "3) 3. 논 리적 설계", "4) 4. 물리적 설계"], ["10, 35", "24, 35", "10, 12", "24, 12"], ["1) 다중 프로그래밍을 지 원 한다", "2) 사용자 인 터 페 이스를 제공한다", "3) 하드웨어를 직접 제어한다", "4) 컴퓨 터의 자 원 을 효율 적으로 관리한다"], ["제어 프로그램", "처리 프로그램", "응용 프로그램", "유틸리티 프로그램"], ["고속 고품질의 통신 서비스 제공", "고성능의 에러 제어 방식을 사용하여 시스템 신뢰도가 높음", "대형 컴퓨터의 공동 이용", "단거리 전송만 지원"], ["각 단계가 끝난 후 결과물이 명확히 나와야 함", "개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵움", "단계별 정의가 분명하고, 전체 공조의 이해가 용이", "사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["소프트웨어 공학", "정보공학 방법론", "구조적 방법론", "시스템 개발"], ["Package Diagram", "State Transition Diagram", "Deployment Diagram", "Entity-Relationship Diagram"], ["1. 정적 구조", "2. 동적 행위", "3. 시스템 구조", "4. 요구사항 분석"], ["1. 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "3. 사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "4. 단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["1) 요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "2) 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "3) 구조적 분석, 구조적 설계, 구현, 테스트", "4) 구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["1. 정의 단계", "2. 개발 단계", "3. 유지보수 단계", "4. 설계 단계"], ["1. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "2. 모형의 적용 경험과 성공 사례가 많다.", "3. 단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "4. 각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["노드와 간선으로 구성된다.", "서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "계층 모델이라고도 한다.", "3개의 서브시스템(모델, 뷰 , 제어)으로 구성되어 있다."], ["데이터 조 회", "데이터 조작", "데이터 베 이스 구조 정의", "데이터 보 안"], ["1) 1. 요구 조 건 분석", "2) 2. 개 념 적 설계", "3) 3. 논 리적 설계", "4) 4. 물리적 설계"], ["10, 35", "24, 35", "10, 12", "24, 12"], ["다중 프로그래밍을 지 원 한다", "사용자 인 터 페 이스를 제공한다", "하드웨어를 직접 제어한다", "컴퓨 터의 자 원 을 효율 적으로 관리한다"], ["제어 프로그램", "처리 프로그램", "응용 프로그램", "유틸리티 프로그램"], ["고속 고품질의 통신 서비스 제공", "고성능의 에러 제어 방식을 사용하여 시스템 신뢰도가 높음", "대형 컴퓨터의 공동 이용", "단거리 전송만 지원"], ["각 단계가 끝난 후 결과물이 명확히 나와야 함", "개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵움", "단계별 정의가 분명하고, 전체 공조의 이해가 용이", "사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["소프트웨어 공학", "정보공학 방법론", "구조적 방법론", "시스템 개발"], ["Package Diagram", "State Transition Diagram", "Deployment Diagram", "Entity-Relationship Diagram"], ["정적 구조", "동적 행위", "시스템 구조", "요구사항 분석"], ["각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "구조적 분석, 구조적 설계, 구현, 테스트", "구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["정의 단계", "개발 단계", "유지보수 단계", "설계 단계"], ["개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "모형의 적용 경험과 성공 사례가 많다.", "단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["노드와 간선으로 구성된다.", "서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "계층 모델이라고도 한다.", "3개의 서브시스템(모델, 뷰 , 제어)으로 구성되어 있다."], ["데이터 조회", "데이터 조작", "데이터베이스 구조 정의", "데이터 보안"], ["요구 조 건 분석", "개 념 적 설계", "논 리적 설계", "물리적 설계"], ["1.10,35", "2.24,35", "3.10,12", "4.24,12"], ["다중 프로그래밍을 지원한다", "사용자 인터페이스를 제공한다", "하드웨어를 직접 제어한다", "컴퓨터의 자원을 효율적으로 관리한다"], ["제어 프로그램", "처리 프로그램", "응용 프로그램", "유틸리티 프로그램"], ["고 속 고 품질 의 통신 서비스 제공", "고성 능 의 에 러 제어 방 식 을 사용하 여 시스템 신뢰 도가 높 음", "대형 컴퓨 터의 공동 이용", "단 거 리 전 송 만 지 원"], ["각 단계가 끝난 후 결과물이 명확히 나와야 함", "개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어 려움", "단계별 정의가 분명하고, 전체 공조의 이해가 용이", "사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["소프트웨어 공 학", "정보공 학 방법론", "구조적 방법론", "시스템 개발"], ["Package Diagram", "State Transition Diagram", "Deployment Diagram", "Entity-Relationship Diagram"], ["NUI", "GUI", "CLI", "OUI"], ["릴리즈 기간을 짧게 반복하여 고객의 요구 변화에 빠르게 한다.", "코드들은 하나의 작업이 마무리될 때마다 지속적으로 통합한다.", "테스트가 지속적으로 진행될 수 있도록 테스트 자동화 도구를 사용한다.", "개발 책임자가 모든 책임을 가지므로 팀원들은 책임 없이 로운 개발이 가능하다."], ["process, data flow, data store, comment", "process, data flow, data store, terminator", "data flow, data store, terminator, data dictionary", "process, data store, terminator, mini-spec"], ["분산 시스템에서 다양한 부분을 관리하고 통신하며 데이터를 교환하게 해주는 소프트웨어로 볼 수 있다.", "위치 투명성(Location Transparency)을 제공한다.", "분산 시스템의 여러 컴포넌트가 요구하는 재사용 가능한 스의 구현을 제공한다.", "애플리케이션과 사용자 사이에서만 분산 서비스를 제공한다."], ["소프트웨어 구조 파악이 용이하다.", "객체지향 설계 및 구현의 생산성을 높이는데 적합하다.", "재사용을 위한 개발 시간이 단축된다.", "절차형 언어와 함께 이용될 때 효율이 극대화된다."], ["UML 확장 모델에서 스테레오 타입 객체를 표현할 때 사용하는 기호로 맞는 것은? ① << >> ② (( )) ③ {{ }} ④ [[ ]] --- 페이지 2 왼쪽 --3회", "UML 확장 모델에서 스테레오 타입 객체를 표현할 때 사용하는 기호로 맞는 것은?", "<< >>", "(( ))"], ["응답 시간(Response Time)", "서버 튜닝(Server Tuning)", "가용성(Availability)", "사용률(Utilization)"], ["나선형 모형", "애자일 모형", "프로토타입 모형", "폭포수 모형"], ["E-R 다이어그램을 사용하여 객체의 행위를 데이터 모델링하는 데 초점을 둔 방법이다.", "객체, 동적, 기능 모델로 나누어 수행하는 방법이다.", "미시적 개발 프로세스와 거시적 개발 프로세스를 모두 사용하는 방법이다.", "Use-Case를 강조하여 사용하는 방법이다."], ["일반화", "분류화", "연관화", "집단화"], ["Association", "Dependency", "Realization", "Generalization"], ["Putnam 모형", "델파이 모형", "COCOMO 모형", "기능점수 모형"], ["변화에 대한 대응보다는 자세한 계획을 중심으로 소프트웨어 를 개발한다.", "프로세스와 도구 중심이 아닌 개개인과의 상호소통을 통해 의 견을 수렴한다.", "협상과 계약보다는 고객과의 협력을 중시한다.", "문서 중심이 아닌, 실행 가능한 소프트웨어를 중시한다."], ["실제 적용된 사례", "문제 및 배경", "개발자의 성명", "재사용 가능한 샘플코드"], ["㉮ → ㉯ → ㉰ → ㉱ → ㉲", "㉲ → ㉮ → ㉯ → ㉱ → ㉰", "㉮ → ㉲ → ㉯ → ㉱ → ㉰", "㉮ → ㉯ → ㉰ → ㉲ → ㉱"], ["㉠-제약조건, ㉡-속성", "㉠-속성, ㉡-오퍼레이션", "㉠-오퍼레이션, ㉡-제약조건", "㉠-속성, ㉡-관계"], ["순차적인 접근방법을 이용한다.", "나선형 모형의 단점을 보완하기 위한 모형이다.", "단계적 정의와 산출물이 명확하다.", "모형의 적용 경험과 성공사례가 많다."], ["구조적 기법", "프로토타이핑 기술", "정보 저장소 기술", "일괄처리 기술"], ["fan-in :2, fan-out :3", "fan-in :3, fan-out :2", "fan-in :1, fan-out :2", "fan-in :2, fan-out :1"], ["상향식 소프트웨어 개발을 위한 문서화 도구이다.", "HIPO 차트 종류에는 가시적 도표, 총체적 도표, 세부적 있다.", "기능과 자료의 의존 관계를 동시에 표현할 수 있다.", "보기 쉽고 이해하기 쉽다."], ["빌드 테이블의 추가", "집계 테이블의 추가", "진행 테이블의 추가", "특정 부분만을 포함하는 테이블 추가"], ["프로그램의 로직이 복잡하여 이해하기 어려운 프로그램을 의미한다.", "아주 오래되거나 참고문서 또는 개발자가 없어 유지보수 작업이 어려운 프로그램을 의미한다.", "오류가 없어 디버깅 과정이 필요 없는 프로그램을 의미한다.", "사용자가 직접 작성한 프로그램을 의미한다."], ["크랙 방지 기술", "정책 관리 기술", "암호화 기술", "방화벽 기술"], ["차수 :4, 단말 노드 :4", "차수 :2, 단말 노드 :4", "차수 :4, 단말 노드 :8", "차수 :2, 단말 노드 :8"], ["범위 분할(Range Partitioning)", "해시 분할(Hash Partitioning)", "조합 분할(Composite Partitioning)", "유닛 분할(Unit Partitioning)"], ["정규화(Normalization)", "체크인(Check-in)", "체크아웃(Check-out)", "커밋(commit)"], ["ISO/IEC 2196", "IEEE 19554", "ISO/IEC 12119", "ISO/IEC 14959"], ["기초 경로 검사", "동치 클래스 분해", "경계값 분석", "원인 결과 그래프"], ["ESB", "xUnit", "STAF", "NTAF"], ["정적 구조", "동적 행위", "시스템 구조", "요구사항 분석"], ["각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없다.", "개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉽다.", "사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없다.", "단계별 정의가 불분명하고 전체 공정의 이해가 어렵다."], ["요구사항 분석, 구조적 설계, 구조적 프로그래밍, 유지보수", "요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍", "구조적 분석, 구조적 설계, 구현, 테스트", "구조적 프로그래밍, 유지보수, 요구사항 분석, 구조적 설계"], ["정의 단계", "개발 단계", "유지보수 단계", "설계 단계"], ["개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다.", "모형의 적용 경험과 성공 사례가 많다.", "단계별 정의가 분명하고, 전체 공정의 이해가 용이하다.", "각 단계가 끝난 후 결과물이 명확히 나와야 한다."], ["노드와 간선으로 구성된다.", "서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.", "계층 모델이라고도 한다.", "3개의 서브시스템(모델, 뷰 , 제어)으로 구성되어 있다."], ["데이터 조회", "데이터 조작", "데이터베이스 구조 정의", "데이터 보안"], ["요구 조 건 분석", "개 념 적 설계", "논 리적 설계", "물리적 설계"], ["1.10,35", "2.24,35", "3.10,12", "4.24,12"], ["다중 프로그래밍을 지원한다", "사용자 인터페이스를 제공한다", "하드웨어를 직접 제어한다", "컴퓨터의 자원을 효율적으로 관리한다"], ["제어 프로그램", "처리 프로그램", "응용 프로그램", "유틸리티 프로그램"], ["고 속 고 품질 의 통신 서비스 제공", "고성 능 의 에 러 제어 방 식 을 사용하 여 시스템 신뢰 도가 높 음", "대형 컴퓨 터의 공동 이용", "단 거 리 전 송 만 지 원"], ["각 단계가 끝난 후 결과물이 명확히 나와야 함", "개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어 려움", "단계별 정의가 분명하고, 전체 공조의 이해가 용이", "사용자들이 모든 요구사항들을 명확하게 제시할 필요는 없음"], ["소프트웨어 공 학", "정보공 학 방법론", "구조적 방법론", "시스템 개발"], ["Package Diagram", "State Transition Diagram", "Deployment Diagram", "Entity-Relationship Diagram"]], "answer": ["2", "1", "2", "3", "1", "2", "3", "3", "1", "3", "3", "4", "4", "1", "4", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""], "explanation": ["소프트웨어 아키텍처는 구성 요소들의 상호작용 및 관계, 각각의 특성을 정의합니다.", "폭포수 모형은 각 단계를 완료하지 않고는 다음 단계로 넘어갈 수 없는 선형 순차적 모형입니다.", "구조적 방법론은 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍 단계로 구성됩니다.", "유지보수 단계는 소프트웨어를 직접 운용하며, 변경에 초점을 두고 여러 환경 변화에 따라 소프트웨어를 적응 및 유지시키는 단계로, 소프트웨어 생명주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계입니다.", "폭포수 모형의 단점 중 하나는 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어렵다는 것입니다.", "파이프 필터 형태의 소프트웨어 아키텍처는 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복하는 형태입니다.", "DDL은 데이터베이스의 구조를 정의, 변경, 삭제하는 데 사용되는 언어입니다.", "논리적 설계 단계에서는 저장 레코드 양식 설계, 레코드 집중의 분석 및 설계 접근 경로 설계 등이 포함됩니다.", "카티션 프로덕트의 결과로 생성되는 릴레이션의 차수는 두 릴레이션의 차수의 합이고, 카디널리티는 두 릴레이션의 카디널리티의 곱입니다.", "운영체제는 하드웨어를 직접 제어하는 것이 아니라, 하드웨어를 관리하고 제어하는 역할을 한다.", "응용 프로그램은 시스템 소프트웨어가 아닌 응용 소프트웨어에 해당한다.", "데이터 통신 시스템은 거리와 시간의 한계를 극복하여 원격지의 정보처리기기 사이의 효율적 정보교환을 지원한다.", "폭포수 모형은 사용자가 모든 요구사항을 명확하게 제시해야 합니다.", "소프트웨어 공학은 소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것입니다.", "정보공학 방법론에서 데이터베이스 설계의 표현으로 Entity-Relationship Diagram을 사용합니다.", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", ""], "subject": ["소프트웨어설계", "소프트웨어설계", "소프트웨어설계", "소프트웨어개발", "소프트웨어개발", "소프트웨어개발", "데이터베이스구축", "데이터베이스구축", "데이터베이스구축", "프로그래밍언어활용", "프로그래밍언어활용", "프로그래밍언어활용", "정보시스템구축관리", "정보시스템구축관리", "정보시스템구축관리", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반", "일반"], "wrong_question": [], "weak_type": [], "notes": [], "user_answer": [], "retrieve_answer": ""}
*3
$9
PEXPIREAT
$30
demo_user:teacher:local:shared
$13
1755999185996
*1
$4
EXEC
