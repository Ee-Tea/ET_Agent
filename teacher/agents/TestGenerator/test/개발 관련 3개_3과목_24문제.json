{
  "exam_title": "정보처리기사 선택과목 모의고사 (3과목)",
  "total_questions": 24,
  "difficulty": "중급",
  "selected_subjects": [
    "소프트웨어개발",
    "프로그래밍언어활용",
    "정보시스템구축관리"
  ],
  "questions_per_subject": 8,
  "subjects": {
    "소프트웨어개발": {
      "requested_count": 8,
      "actual_count": 8,
      "questions": [
        {
          "question": "소프트웨어 생명 주기의 정의 단계에서 주로 수행하는 활동은?",
          "options": [
            "  1. 타당성 검토",
            "  2. 요구사항 분석",
            "  3. 설계",
            "  4. 구현"
          ],
          "answer": "2",
          "explanation": "정의 단계에서는 '무엇'을 처리하는 소프트웨어를 개발할 것인지 정의하며, 요구사항 분석이 주요 활동입니다.",
          "subject": "소프트웨어개발"
        },
        {
          "question": "폭포수 모형의 특징으로 옳지 않은 것은?",
          "options": [
            "  1. 선형 순차적 모형",
            "  2. 각 단계가 끝난 후 결과물이 명확히 나와야 함",
            "  3. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어려움",
            "  4. 사용자가 모든 요구사항을 명확하게 제시해야 함"
          ],
          "answer": "4",
          "explanation": "폭포수 모형은 사용자가 모든 요구사항을 명확하게 제시해야 한다는 것이 특징이지만, 실제로는 사용자들이 모든 요구사항을 처음부터 명확하게 제시하는 것은 현실적으로 어려울 수 있습니다.",
          "subject": "소프트웨어개발"
        },
        {
          "question": "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?",
          "options": [
            "  1. 노드와 간선으로 구성된다.",
            "  2. 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.",
            "  3. 계층 모델이라고도 한다.",
            "  4. 3개의 서브시스템(모델, 뷰, 제어)으로 구성되어 있다."
          ],
          "answer": "2",
          "explanation": "파이프 필터 형태의 소프트웨어 아키텍처는 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복합니다.",
          "subject": "소프트웨어개발"
        },
        {
          "question": "DOS 및 Unix 등의 운영체제에서 조작을 위해 사용하던 것으로, 정해진 명령 문자열을 입력하여 시스템을 조작하는 사용자 인터페이스는?",
          "options": [
            "  1. GUI(Graphical User Interface)",
            "  2. CLI(Command Line Interface)",
            "  3. CUI(Cell User Interface)",
            "  4. MUI(Mobile User Interface)"
          ],
          "answer": "2",
          "explanation": "CLI는 명령 문자열을 입력하여 시스템을 조작하는 사용자 인터페이스입니다.",
          "subject": "소프트웨어개발"
        },
        {
          "question": "UML에서 시퀀스 다이어그램의 구성 항목에 해당하지 않는 것은?",
          "options": [
            "  1. 생명선",
            "  2. 실행",
            "  3. 확장",
            "  4. 메시지"
          ],
          "answer": "3",
          "explanation": "시퀀스 다이어그램의 구성 항목에는 생명선, 실행, 메시지 등이 포함되지만, 확장은 포함되지 않습니다.",
          "subject": "소프트웨어개발"
        },
        {
          "question": "다음 중 상태 다이어그램에서 객체 전이의 요인이 되는 요소는?",
          "options": [
            "  1. event",
            "  2. state",
            "  3. message",
            "  4. transition"
          ],
          "answer": "1",
          "explanation": "상태 다이어그램에서 객체 전이의 요인이 되는 요소는 event입니다.",
          "subject": "소프트웨어개발"
        },
        {
          "question": "소프트웨어 공학에서 구조적 기법에 해당하는 것은?",
          "options": [
            "  1. 프로토타이핑 기술",
            "  2. 정보 저장소 기술",
            "  3. 일괄처리 기술",
            "  4. 구조적 기법"
          ],
          "answer": "4",
          "explanation": "구조적 기법은 소프트웨어 개발에서 구조적인 접근 방법을 제공하는 기법입니다.",
          "subject": "소프트웨어개발"
        },
        {
          "question": "모듈 F에서의 fan-in과 fan-out의 수를 결정하는 요인으로 옳은 것은?",
          "options": [
            "  1. 모듈의 크기",
            "  2. 모듈의 복잡도",
            "  3. 모듈 간의 연결 구조",
            "  4. 모듈의 재사용성"
          ],
          "answer": "3",
          "explanation": "모듈 F에서의 fan-in과 fan-out의 수는 모듈 간의 연결 구조에 의해 결정됩니다.",
          "subject": "소프트웨어개발"
        }
      ],
      "status": "SUCCESS"
    },
    "프로그래밍언어활용": {
      "requested_count": 8,
      "actual_count": 8,
      "questions": [
        {
          "question": "개발에 필요한 환경 구축과 관련하여 하드웨어 환경과 관련이 없는 것은?",
          "options": [
            "  1. Eclipse",
            "  2. Oracle DB",
            "  3. 웹 서버",
            "  4. WAS"
          ],
          "answer": "1",
          "explanation": "Eclipse는 통합 개발 환경(IDE) 소프트웨어로 하드웨어 환경과 관련이 없다.",
          "subject": "프로그래밍언어활용"
        },
        {
          "question": "UNIX에 대한 설명으로 옳지 않은 것은?",
          "options": [
            "  1. 사용자는 하나 이상의 작업을 백그라운드에서 수행할 수 있어 여러 개의 작업을 병행 처리할 수 있다.",
            "  2. 쉘은 프로세스 관리, 기억장치 관리, 입출력 관리 등의 기능을 수행한다.",
            "  3. 두 사람 이상의 사용자가 동시에 시스템을 사용할 수 있어 정보와 유틸리티들을 공유하는 편리한 작업 환경을 제공한다.",
            "  4. 상당 부분 C 언어를 사용하여 작성되었으며 이식성이 우수하다."
          ],
          "answer": "2",
          "explanation": "쉘은 프로세스 관리, 기억장치 관리, 입출력 관리 등의 기능을 수행하지 않는다.",
          "subject": "프로그래밍언어활용"
        },
        {
          "question": "C 또는 Java의 printf에서 키보드의 [Tab]을 일정 간격 띄어주는데 사용하는 제어문자는?",
          "options": [
            "  1. t",
            "  2. b",
            "  3. ",
            "  4. r"
          ],
          "answer": "1",
          "explanation": "t는 탭 문자이다.",
          "subject": "프로그래밍언어활용"
        },
        {
          "question": "다음 내용이 설명하는 결합도는?",
          "options": [
            "  1. 내용 결합도",
            "  2. 공통 결합도",
            "  3. 외부 결합도",
            "  4. 제어 결합도"
          ],
          "answer": "4",
          "explanation": "한 모듈이 다른 모듈의 상세한 처리 절차를 알고 있어 제어하는 경우를 제어 결합도라고 한다.",
          "subject": "프로그래밍언어활용"
        },
        {
          "question": "객체 지향 소프트웨어 공학에서 하나 이상의 유사한 객체들을 묶어서 하나의 공통된 특성을 표현한 것은?",
          "options": [
            "  1. 클래스",
            "  2. 트랜잭션",
            "  3. 시퀀스",
            "  4. 서브루틴"
          ],
          "answer": "1",
          "explanation": "하나 이상의 유사한 객체들을 묶어서 하나의 공통된 특성을 표현한 것을 클래스라고 한다.",
          "subject": "프로그래밍언어활용"
        },
        {
          "question": "UI 설계 원칙에서 누구나 쉽게 이해하고 사용할 수 있어야 한다는 것은?",
          "options": [
            "  1. 직관성",
            "  2. 유효성",
            "  3. 무결성",
            "  4. 유연성"
          ],
          "answer": "1",
          "explanation": "UI 설계 원칙에서 누구나 쉽게 이해하고 사용할 수 있어야 한다는 것은 직관성이다.",
          "subject": "프로그래밍언어활용"
        },
        {
          "question": "대표적으로 DOS, UNIX 등에서 조작을 위해 사용하던 것으로 정해진 명령 문자열을 입력하여 시스템을 조작하는 사용자 인터페이스는?",
          "options": [
            "  1. GUI",
            "  2. CLI",
            "  3. CUI",
            "  4. MUI"
          ],
          "answer": "2",
          "explanation": "CLI는 명령 줄 인터페이스로 정해진 명령 문자열을 입력하여 시스템을 조작하는 사용자 인터페이스이다.",
          "subject": "프로그래밍언어활용"
        },
        {
          "question": "다음 중 애자일 소프트웨어 개발에 대한 설명으로 틀린 것은?",
          "options": [
            "  1. 공정과 도구보다 개인과의 상호작용을 더 가치 있게 여긴다.",
            "  2. 동작하는 소프트웨어보다는 포괄적인 문서를 가치 있게 여긴다.",
            "  3. 계약 협상보다는 고객과의 협력을 가치 있게 여긴다.",
            "  4. 계획을 따르기보다 변화에 대응하기를 가치 있게 여긴다."
          ],
          "answer": "2",
          "explanation": "애자일 소프트웨어 개발에서는 동작하는 소프트웨어보다는 개인과의 상호작용, 고객과의 협력, 변화에 대응하기를 더 가치 있게 여긴다.",
          "subject": "프로그래밍언어활용"
        }
      ],
      "status": "SUCCESS"
    },
    "정보시스템구축관리": {
      "requested_count": 8,
      "actual_count": 8,
      "questions": [
        {
          "question": "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?",
          "options": [
            "  1. 각 단계가 끝난 후 결과물이 명확히 나와야 함",
            "  2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어려움",
            "  3. 단계별 정의가 분명하고, 전체 공조의 이해가 용이",
            "  4. 사용자가 모든 요구사항을 명확하게 제시하지 않아도 됨"
          ],
          "answer": "4",
          "explanation": "폭포수 모형은 사용자가 모든 요구사항을 명확하게 제시해야 함",
          "subject": "정보시스템구축관리"
        },
        {
          "question": "소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것을 무엇이라고 하는가?",
          "options": [
            "  1. 소프트웨어 공학",
            "  2. 소프트웨어 생명주기",
            "  3. 소프트웨어 개발 방법론",
            "  4. 시스템 개발 방법론"
          ],
          "answer": "1",
          "explanation": "소프트웨어 공학",
          "subject": "정보시스템구축관리"
        },
        {
          "question": "정보공학 방법론에서 데이터베이스 설계의 표현으로 사용하는 모델링 언어는?",
          "options": [
            "  1. Package Diagram",
            "  2. State Transition Diagram",
            "  3. Deployment Diagram",
            "  4. Entity-Relationship Diagram"
          ],
          "answer": "4",
          "explanation": "Entity-Relationship Diagram",
          "subject": "정보시스템구축관리"
        },
        {
          "question": "미들웨어(Middleware)에 대한 설명으로 틀린 것은?",
          "options": [
            "  1. 여러 운영체제에서 응용 프로그램들 사이에 위치한 소프트웨어이다.",
            "  2. 미들웨어의 서비스 이용을 위해 사용자가 정보 교환 방법 등의 내부 동작을 쉽게 확인할 수 있어야 한다.",
            "  3. 소프트웨어 컴포넌트를 연결하기 위한 것임",
            "  4. 이기종 플랫폼 간의 데이터 교환을 지원함"
          ],
          "answer": "2",
          "explanation": "미들웨어의 서비스 이용을 위해 사용자가 정보 교환 방법 등의 내부 동작을 쉽게 확인할 필요는 없음",
          "subject": "정보시스템구축관리"
        },
        {
          "question": "소프트웨어 생명주기 단계 중 유지보수 단계에 대한 설명으로 옳은 것은?",
          "options": [
            "  1. 소프트웨어를 직접 운용하며, '변경(Change)'에 초점을 두고 여러 환경 변화에 따라 소프트웨어를 적응 및 유지시키는 단계",
            "  2. 소프트웨어 개발 과정의 앞 단계가 끝나야만 다음 단계로 넘어갈 수 있는 선형 순차적 모형",
            "  3. 관리자와 사용자가 가장 많이 참여하는 단계",
            "  4. 실제적으로 소프트웨어를 개발하는 단계"
          ],
          "answer": "1",
          "explanation": "유지보수 단계는 소프트웨어를 직접 운용하며, '변경(Change)'에 초점을 두고 여러 환경 변화에 따라 소프트웨어를 적응 및 유지시키는 단계",
          "subject": "정보시스템구축관리"
        },
        {
          "question": "구조적 방법론의 구성 단계로 옳지 않은 것은?",
          "options": [
            "  1. 요구사항 분석",
            "  2. 구조적 분석",
            "  3. 구조적 설계",
            "  4. 구조적 프로그래밍"
          ],
          "answer": "4",
          "explanation": "구조적 방법론은 요구사항 분석, 구조적 분석, 구조적 설계로 구성됨",
          "subject": "정보시스템구축관리"
        },
        {
          "question": "네트워크 구성 형태 중 중앙 집중식의 네트워크 구성 형태는?",
          "options": [
            "  1. 버스 구조",
            "  2. 스타 구조",
            "  3. 링 구조",
            "  4. 메쉬 구조"
          ],
          "answer": "2",
          "explanation": "스타 구조는 중앙 집중식의 네트워크 구성 형태임",
          "subject": "정보시스템구축관리"
        },
        {
          "question": "소프트웨어 생명주기 모형 중 폭포수 모형의 장점으로 옳지 않은 것은?",
          "options": [
            "  1. 모형의 적용 경험과 성공 사례가 많음",
            "  2. 단계별 정의가 분명하고, 전체 공조의 이해가 용이",
            "  3. 단계별 산출물이 정확하여 개발 공정의 기준점을 잘 제시",
            "  4. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉬움"
          ],
          "answer": "4",
          "explanation": "폭포수 모형은 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어려움",
          "subject": "정보시스템구축관리"
        }
      ],
      "status": "SUCCESS"
    }
  },
  "all_questions": [
    {
      "question": "소프트웨어 생명 주기의 정의 단계에서 주로 수행하는 활동은?",
      "options": [
        "  1. 타당성 검토",
        "  2. 요구사항 분석",
        "  3. 설계",
        "  4. 구현"
      ],
      "answer": "2",
      "explanation": "정의 단계에서는 '무엇'을 처리하는 소프트웨어를 개발할 것인지 정의하며, 요구사항 분석이 주요 활동입니다.",
      "subject": "소프트웨어개발"
    },
    {
      "question": "폭포수 모형의 특징으로 옳지 않은 것은?",
      "options": [
        "  1. 선형 순차적 모형",
        "  2. 각 단계가 끝난 후 결과물이 명확히 나와야 함",
        "  3. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어려움",
        "  4. 사용자가 모든 요구사항을 명확하게 제시해야 함"
      ],
      "answer": "4",
      "explanation": "폭포수 모형은 사용자가 모든 요구사항을 명확하게 제시해야 한다는 것이 특징이지만, 실제로는 사용자들이 모든 요구사항을 처음부터 명확하게 제시하는 것은 현실적으로 어려울 수 있습니다.",
      "subject": "소프트웨어개발"
    },
    {
      "question": "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?",
      "options": [
        "  1. 노드와 간선으로 구성된다.",
        "  2. 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.",
        "  3. 계층 모델이라고도 한다.",
        "  4. 3개의 서브시스템(모델, 뷰, 제어)으로 구성되어 있다."
      ],
      "answer": "2",
      "explanation": "파이프 필터 형태의 소프트웨어 아키텍처는 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복합니다.",
      "subject": "소프트웨어개발"
    },
    {
      "question": "DOS 및 Unix 등의 운영체제에서 조작을 위해 사용하던 것으로, 정해진 명령 문자열을 입력하여 시스템을 조작하는 사용자 인터페이스는?",
      "options": [
        "  1. GUI(Graphical User Interface)",
        "  2. CLI(Command Line Interface)",
        "  3. CUI(Cell User Interface)",
        "  4. MUI(Mobile User Interface)"
      ],
      "answer": "2",
      "explanation": "CLI는 명령 문자열을 입력하여 시스템을 조작하는 사용자 인터페이스입니다.",
      "subject": "소프트웨어개발"
    },
    {
      "question": "UML에서 시퀀스 다이어그램의 구성 항목에 해당하지 않는 것은?",
      "options": [
        "  1. 생명선",
        "  2. 실행",
        "  3. 확장",
        "  4. 메시지"
      ],
      "answer": "3",
      "explanation": "시퀀스 다이어그램의 구성 항목에는 생명선, 실행, 메시지 등이 포함되지만, 확장은 포함되지 않습니다.",
      "subject": "소프트웨어개발"
    },
    {
      "question": "다음 중 상태 다이어그램에서 객체 전이의 요인이 되는 요소는?",
      "options": [
        "  1. event",
        "  2. state",
        "  3. message",
        "  4. transition"
      ],
      "answer": "1",
      "explanation": "상태 다이어그램에서 객체 전이의 요인이 되는 요소는 event입니다.",
      "subject": "소프트웨어개발"
    },
    {
      "question": "소프트웨어 공학에서 구조적 기법에 해당하는 것은?",
      "options": [
        "  1. 프로토타이핑 기술",
        "  2. 정보 저장소 기술",
        "  3. 일괄처리 기술",
        "  4. 구조적 기법"
      ],
      "answer": "4",
      "explanation": "구조적 기법은 소프트웨어 개발에서 구조적인 접근 방법을 제공하는 기법입니다.",
      "subject": "소프트웨어개발"
    },
    {
      "question": "모듈 F에서의 fan-in과 fan-out의 수를 결정하는 요인으로 옳은 것은?",
      "options": [
        "  1. 모듈의 크기",
        "  2. 모듈의 복잡도",
        "  3. 모듈 간의 연결 구조",
        "  4. 모듈의 재사용성"
      ],
      "answer": "3",
      "explanation": "모듈 F에서의 fan-in과 fan-out의 수는 모듈 간의 연결 구조에 의해 결정됩니다.",
      "subject": "소프트웨어개발"
    },
    {
      "question": "개발에 필요한 환경 구축과 관련하여 하드웨어 환경과 관련이 없는 것은?",
      "options": [
        "  1. Eclipse",
        "  2. Oracle DB",
        "  3. 웹 서버",
        "  4. WAS"
      ],
      "answer": "1",
      "explanation": "Eclipse는 통합 개발 환경(IDE) 소프트웨어로 하드웨어 환경과 관련이 없다.",
      "subject": "프로그래밍언어활용"
    },
    {
      "question": "UNIX에 대한 설명으로 옳지 않은 것은?",
      "options": [
        "  1. 사용자는 하나 이상의 작업을 백그라운드에서 수행할 수 있어 여러 개의 작업을 병행 처리할 수 있다.",
        "  2. 쉘은 프로세스 관리, 기억장치 관리, 입출력 관리 등의 기능을 수행한다.",
        "  3. 두 사람 이상의 사용자가 동시에 시스템을 사용할 수 있어 정보와 유틸리티들을 공유하는 편리한 작업 환경을 제공한다.",
        "  4. 상당 부분 C 언어를 사용하여 작성되었으며 이식성이 우수하다."
      ],
      "answer": "2",
      "explanation": "쉘은 프로세스 관리, 기억장치 관리, 입출력 관리 등의 기능을 수행하지 않는다.",
      "subject": "프로그래밍언어활용"
    },
    {
      "question": "C 또는 Java의 printf에서 키보드의 [Tab]을 일정 간격 띄어주는데 사용하는 제어문자는?",
      "options": [
        "  1. t",
        "  2. b",
        "  3. ",
        "  4. r"
      ],
      "answer": "1",
      "explanation": "t는 탭 문자이다.",
      "subject": "프로그래밍언어활용"
    },
    {
      "question": "다음 내용이 설명하는 결합도는?",
      "options": [
        "  1. 내용 결합도",
        "  2. 공통 결합도",
        "  3. 외부 결합도",
        "  4. 제어 결합도"
      ],
      "answer": "4",
      "explanation": "한 모듈이 다른 모듈의 상세한 처리 절차를 알고 있어 제어하는 경우를 제어 결합도라고 한다.",
      "subject": "프로그래밍언어활용"
    },
    {
      "question": "객체 지향 소프트웨어 공학에서 하나 이상의 유사한 객체들을 묶어서 하나의 공통된 특성을 표현한 것은?",
      "options": [
        "  1. 클래스",
        "  2. 트랜잭션",
        "  3. 시퀀스",
        "  4. 서브루틴"
      ],
      "answer": "1",
      "explanation": "하나 이상의 유사한 객체들을 묶어서 하나의 공통된 특성을 표현한 것을 클래스라고 한다.",
      "subject": "프로그래밍언어활용"
    },
    {
      "question": "UI 설계 원칙에서 누구나 쉽게 이해하고 사용할 수 있어야 한다는 것은?",
      "options": [
        "  1. 직관성",
        "  2. 유효성",
        "  3. 무결성",
        "  4. 유연성"
      ],
      "answer": "1",
      "explanation": "UI 설계 원칙에서 누구나 쉽게 이해하고 사용할 수 있어야 한다는 것은 직관성이다.",
      "subject": "프로그래밍언어활용"
    },
    {
      "question": "대표적으로 DOS, UNIX 등에서 조작을 위해 사용하던 것으로 정해진 명령 문자열을 입력하여 시스템을 조작하는 사용자 인터페이스는?",
      "options": [
        "  1. GUI",
        "  2. CLI",
        "  3. CUI",
        "  4. MUI"
      ],
      "answer": "2",
      "explanation": "CLI는 명령 줄 인터페이스로 정해진 명령 문자열을 입력하여 시스템을 조작하는 사용자 인터페이스이다.",
      "subject": "프로그래밍언어활용"
    },
    {
      "question": "다음 중 애자일 소프트웨어 개발에 대한 설명으로 틀린 것은?",
      "options": [
        "  1. 공정과 도구보다 개인과의 상호작용을 더 가치 있게 여긴다.",
        "  2. 동작하는 소프트웨어보다는 포괄적인 문서를 가치 있게 여긴다.",
        "  3. 계약 협상보다는 고객과의 협력을 가치 있게 여긴다.",
        "  4. 계획을 따르기보다 변화에 대응하기를 가치 있게 여긴다."
      ],
      "answer": "2",
      "explanation": "애자일 소프트웨어 개발에서는 동작하는 소프트웨어보다는 개인과의 상호작용, 고객과의 협력, 변화에 대응하기를 더 가치 있게 여긴다.",
      "subject": "프로그래밍언어활용"
    },
    {
      "question": "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?",
      "options": [
        "  1. 각 단계가 끝난 후 결과물이 명확히 나와야 함",
        "  2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어려움",
        "  3. 단계별 정의가 분명하고, 전체 공조의 이해가 용이",
        "  4. 사용자가 모든 요구사항을 명확하게 제시하지 않아도 됨"
      ],
      "answer": "4",
      "explanation": "폭포수 모형은 사용자가 모든 요구사항을 명확하게 제시해야 함",
      "subject": "정보시스템구축관리"
    },
    {
      "question": "소프트웨어 개발 생명주기에 소프트웨어 공학 원리를 적용한 것을 무엇이라고 하는가?",
      "options": [
        "  1. 소프트웨어 공학",
        "  2. 소프트웨어 생명주기",
        "  3. 소프트웨어 개발 방법론",
        "  4. 시스템 개발 방법론"
      ],
      "answer": "1",
      "explanation": "소프트웨어 공학",
      "subject": "정보시스템구축관리"
    },
    {
      "question": "정보공학 방법론에서 데이터베이스 설계의 표현으로 사용하는 모델링 언어는?",
      "options": [
        "  1. Package Diagram",
        "  2. State Transition Diagram",
        "  3. Deployment Diagram",
        "  4. Entity-Relationship Diagram"
      ],
      "answer": "4",
      "explanation": "Entity-Relationship Diagram",
      "subject": "정보시스템구축관리"
    },
    {
      "question": "미들웨어(Middleware)에 대한 설명으로 틀린 것은?",
      "options": [
        "  1. 여러 운영체제에서 응용 프로그램들 사이에 위치한 소프트웨어이다.",
        "  2. 미들웨어의 서비스 이용을 위해 사용자가 정보 교환 방법 등의 내부 동작을 쉽게 확인할 수 있어야 한다.",
        "  3. 소프트웨어 컴포넌트를 연결하기 위한 것임",
        "  4. 이기종 플랫폼 간의 데이터 교환을 지원함"
      ],
      "answer": "2",
      "explanation": "미들웨어의 서비스 이용을 위해 사용자가 정보 교환 방법 등의 내부 동작을 쉽게 확인할 필요는 없음",
      "subject": "정보시스템구축관리"
    },
    {
      "question": "소프트웨어 생명주기 단계 중 유지보수 단계에 대한 설명으로 옳은 것은?",
      "options": [
        "  1. 소프트웨어를 직접 운용하며, '변경(Change)'에 초점을 두고 여러 환경 변화에 따라 소프트웨어를 적응 및 유지시키는 단계",
        "  2. 소프트웨어 개발 과정의 앞 단계가 끝나야만 다음 단계로 넘어갈 수 있는 선형 순차적 모형",
        "  3. 관리자와 사용자가 가장 많이 참여하는 단계",
        "  4. 실제적으로 소프트웨어를 개발하는 단계"
      ],
      "answer": "1",
      "explanation": "유지보수 단계는 소프트웨어를 직접 운용하며, '변경(Change)'에 초점을 두고 여러 환경 변화에 따라 소프트웨어를 적응 및 유지시키는 단계",
      "subject": "정보시스템구축관리"
    },
    {
      "question": "구조적 방법론의 구성 단계로 옳지 않은 것은?",
      "options": [
        "  1. 요구사항 분석",
        "  2. 구조적 분석",
        "  3. 구조적 설계",
        "  4. 구조적 프로그래밍"
      ],
      "answer": "4",
      "explanation": "구조적 방법론은 요구사항 분석, 구조적 분석, 구조적 설계로 구성됨",
      "subject": "정보시스템구축관리"
    },
    {
      "question": "네트워크 구성 형태 중 중앙 집중식의 네트워크 구성 형태는?",
      "options": [
        "  1. 버스 구조",
        "  2. 스타 구조",
        "  3. 링 구조",
        "  4. 메쉬 구조"
      ],
      "answer": "2",
      "explanation": "스타 구조는 중앙 집중식의 네트워크 구성 형태임",
      "subject": "정보시스템구축관리"
    },
    {
      "question": "소프트웨어 생명주기 모형 중 폭포수 모형의 장점으로 옳지 않은 것은?",
      "options": [
        "  1. 모형의 적용 경험과 성공 사례가 많음",
        "  2. 단계별 정의가 분명하고, 전체 공조의 이해가 용이",
        "  3. 단계별 산출물이 정확하여 개발 공정의 기준점을 잘 제시",
        "  4. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 쉬움"
      ],
      "answer": "4",
      "explanation": "폭포수 모형은 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어려움",
      "subject": "정보시스템구축관리"
    }
  ],
  "generation_summary": {
    "target_total": 24,
    "actual_total": 24,
    "success_rate": "100.0%",
    "successful_subjects": 3,
    "failed_subjects": 0,
    "completion_status": "COMPLETE",
    "generation_time": "4.3초"
  },
  "failed_subjects": [],
  "model_info": "Groq llama-4-scout-17b-16e-instruct",
  "parallel_agents": 2
}