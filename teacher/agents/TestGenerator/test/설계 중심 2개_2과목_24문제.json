{
  "exam_title": "정보처리기사 선택과목 모의고사 (2과목)",
  "total_questions": 24,
  "difficulty": "중급",
  "selected_subjects": [
    "소프트웨어설계",
    "소프트웨어개발"
  ],
  "questions_per_subject": 12,
  "subjects": {
    "소프트웨어설계": {
      "requested_count": 12,
      "actual_count": 12,
      "questions": [
        {
          "question": "객체 지향 소프트웨어 공학에서 하나 이상의 유사한 객체들을 묶어서 하나의 공통된 특성을 표현한 것은?",
          "options": [
            "  1. 클래스",
            "  2. 시퀀스",
            "  3. 서브루틴",
            "  4. 설계 원칙"
          ],
          "answer": "1",
          "explanation": "클래스는 유사한 객체들을 묶어서 하나의 공통된 특성을 표현한 개념입니다.",
          "subject": "소프트웨어설계"
        },
        {
          "question": "UI 설계 원칙에서 누구나 쉽게 이해하고 사용할 수 있어야 한다는 것은?",
          "options": [
            "  1. 유효성",
            "  2. 직관성",
            "  3. 무결성",
            "  4. 유연성"
          ],
          "answer": "2",
          "explanation": "직관성은 사용자가 쉽게 이해하고 사용할 수 있는 사용자 인터페이스를 의미합니다.",
          "subject": "소프트웨어설계"
        },
        {
          "question": "대표적으로 DOS, UNIX 등 운영체제에서 조작을 위해 사용하던 것으로 정해진 명령 문자열을 입력하여 시스템을 조작하는 사용자 인터페이스는?",
          "options": [
            "  1. GUI",
            "  2. CLI",
            "  3. CUI",
            "  4. MUI"
          ],
          "answer": "2",
          "explanation": "CLI는 명령 줄 인터페이스로, 사용자가 명령어를 입력하여 시스템을 조작하는 인터페이스입니다.",
          "subject": "소프트웨어설계"
        },
        {
          "question": "다음 중 애자일 소프트웨어 개발에 대한 설명으로 틀린 것은?",
          "options": [
            "  1. 공정과 도구보다 개인과의 상호작용을 더 가치 있게 여긴다.",
            "  2. 동작하는 소프트웨어보다는 포괄적인 문서를 가치 있게 여긴다.",
            "  3. 계약 협상보다는 고객과의 협력을 가치 있게 여긴다.",
            "  4. 계획을 따르기보다 변화에 대응하기를 가치 있게 여긴다."
          ],
          "answer": "2",
          "explanation": "애자일 소프트웨어 개발에서는 동작하는 소프트웨어를 문서보다 가치 있게 여깁니다.",
          "subject": "소프트웨어설계"
        },
        {
          "question": "GoF(Gang of Four) 디자인 패턴을 생성, 구조, 행동 패턴의 세 그룹으로 분류할 때 구조 패턴이 아닌 것은?",
          "options": [
            "  1. Adapter 패턴",
            "  2. Bridge 패턴",
            "  3. Builder 패턴",
            "  4. Proxy 패턴"
          ],
          "answer": "3",
          "explanation": "Builder 패턴은 생성 패턴에 속합니다.",
          "subject": "소프트웨어설계"
        },
        {
          "question": "코드 설계에서 일정한 일련번호를 부여하는 방식의 코드는?",
          "options": [
            "  1. 연상 코드",
            "  2. 블록 코드",
            "  3. 순차 코드",
            "  4. 표의 숫자 코드"
          ],
          "answer": "3",
          "explanation": "순차 코드는 일정한 일련번호를 부여하는 방식의 코드입니다.",
          "subject": "소프트웨어설계"
        },
        {
          "question": "입력되는 데이터를 컴퓨터의 프로세서가 처리하기 전에 미리 처리하여 프로세서가 처리하는 시간을 줄여주는 프로그램이나 하드웨어를 말하는 것은?",
          "options": [
            "  1. EAI",
            "  2. FEP",
            "  3. GPL",
            "  4. Duplexing"
          ],
          "answer": "2",
          "explanation": "FEP는 전처리기로, 입력 데이터를 미리 처리하여 프로세서의 부하를 줄여줍니다.",
          "subject": "소프트웨어설계"
        },
        {
          "question": "소프트웨어 아키텍처와 관련한 설명으로 틀린 것은?",
          "options": [
            "  1. 파이프 필터 아키텍처에서 데이터는 파이프를 통해 양방향으로 흐르며 필터 이동 시 오버헤드가 발생하지 않는다.",
            "  2. 외부에서 인식할 수 있는 특성이 담긴 소프트웨어의 골격이 되는 기본 구조로 볼 수 있다.",
            "  3. 데이터 중심 아키텍처는 공유 데이터에 접근하는 여러 컴포넌트를 두어 데이터의 일관성을 유지한다."
          ],
          "answer": "1",
          "explanation": "파이프 필터 아키텍처에서 데이터는 단방향으로 흐르며, 필터 이동 시 오버헤드가 발생할 수 있습니다.",
          "subject": "소프트웨어설계"
        },
        {
          "question": "UML의 구성 요소에는 사물(Things), 관계(Relationships), 다이어그램 등이 포함된다. UML의 기본 구성 요소 중 사물에 포함되지 않는 것은?",
          "options": [
            "  1. 클래스",
            "  2. 객체",
            "  3. 용례",
            "  4. 패키지"
          ],
          "answer": "4",
          "explanation": "패키지는 사물과 관계를 구성하는 요소 중 하나가 아닌, 사물을 그룹화하는 개념입니다.",
          "subject": "소프트웨어설계"
        },
        {
          "question": "정보공학 방법론에서 데이터베이스 설계의 표현으로 사용하는 모델링 언어는?",
          "options": [
            "  1. Package Diagram",
            "  2. State Transition Diagram",
            "  3. Deployment Diagram",
            "  4. ER Diagram"
          ],
          "answer": "4",
          "explanation": "ER Diagram은 데이터베이스 설계에 사용되는 모델링 언어입니다.",
          "subject": "소프트웨어설계"
        },
        {
          "question": "객체지향 분석 방법론 중 다이어그램을 사용하여 객체의 행위를 모델링하며 객체 식별, 구조 식별, 주체 정의, 속성 및 관계 정의, 서비스 정의 등의 과정으로 구성되는 것은?",
          "options": [
            "  1. Coad & Yourdon 방법",
            "  2. Booch 방법",
            "  3. Jacobson 방법",
            "  4. Wirfs-Brocks 방법"
          ],
          "answer": "1",
          "explanation": "Coad & Yourdon 방법은 객체 식별, 구조 식별, 주체 정의, 속성 및 관계 정의, 서비스 정의 등의 과정으로 구성됩니다.",
          "subject": "소프트웨어설계"
        },
        {
          "question": "트랜잭션이 올바르게 처리되고 있는지 데이터를 감시하고 제어하는 미들웨어는?",
          "options": [
            "  1. RPC",
            "  2. ORB",
            "  3. TP monitor",
            "  4. HUB"
          ],
          "answer": "3",
          "explanation": "TP monitor는 트랜잭션을 감시하고 제어하는 미들웨어입니다.",
          "subject": "소프트웨어설계"
        }
      ],
      "status": "SUCCESS"
    },
    "소프트웨어개발": {
      "requested_count": 12,
      "actual_count": 12,
      "questions": [
        {
          "question": "소프트웨어 생명 주기의 정의 단계에서 주로 수행하는 활동은 무엇입니까?",
          "options": [
            "  1. 타당성 검토",
            "  2. 요구 사항 분석",
            "  3. 설계",
            "  4. 구현"
          ],
          "answer": "2",
          "explanation": "정의 단계에서는 '무엇'을 처리하는 소프트웨어를 개발할 것인지 정의하며, 요구 사항 분석이 주요 활동입니다.",
          "subject": "소프트웨어개발"
        },
        {
          "question": "소프트웨어 생명 주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?",
          "options": [
            "  1. 선형 순차적 모형",
            "  2. 각 단계가 끝난 후 결과물이 명확히 나와야 함",
            "  3. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어려움",
            "  4. 사용자가 모든 요구사항들을 명확하게 제시할 필요 없음"
          ],
          "answer": "4",
          "explanation": "폭포수 모형은 사용자가 모든 요구사항들을 명확하게 제시해야 합니다.",
          "subject": "소프트웨어개발"
        },
        {
          "question": "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?",
          "options": [
            "  1. 노드와 간선으로 구성된다.",
            "  2. 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.",
            "  3. 계층 모델이라고도 한다.",
            "  4. 3개의 서브시스템(모델, 뷰, 제어)으로 구성되어 있다."
          ],
          "answer": "2",
          "explanation": "파이프 필터 형태의 소프트웨어 아키텍처는 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복합니다.",
          "subject": "소프트웨어개발"
        },
        {
          "question": "DOS 및 Unix 등의 운영체제에서 조작을 위해 사용하던 것으로, 정해진 명령 문자열을 입력하여 시스템을 조작하는 사용자 인터페이스는?",
          "options": [
            "  1. GUI(Graphical User Interface)",
            "  2. CLI(Command Line Interface)",
            "  3. CUI(Cell User Interface)",
            "  4. MUI(Mobile User Interface)"
          ],
          "answer": "2",
          "explanation": "CLI는 명령 문자열을 입력하여 시스템을 조작하는 사용자 인터페이스입니다.",
          "subject": "소프트웨어개발"
        },
        {
          "question": "UML에서 시퀀스 다이어그램의 구성 항목에 해당하지 않는 것은?",
          "options": [
            "  1. 생명선",
            "  2. 실행",
            "  3. 확장",
            "  4. 메시지"
          ],
          "answer": "3",
          "explanation": "시퀀스 다이어그램의 구성 항목에는 생명선, 실행, 메시지가 포함되지만 확장은 포함되지 않습니다.",
          "subject": "소프트웨어개발"
        },
        {
          "question": "다음 중 상태 다이어그램에서 객체 전이의 요인이 되는 요소는?",
          "options": [
            "  1. event",
            "  2. state",
            "  3. message",
            "  4. transition"
          ],
          "answer": "1",
          "explanation": "상태 다이어그램에서 객체 전이의 요인이 되는 요소는 event입니다.",
          "subject": "소프트웨어개발"
        },
        {
          "question": "소프트웨어 공학에서 구조적 기법에 해당하는 것은?",
          "options": [
            "  1. 프로토타이핑 기술",
            "  2. 정보 저장소 기술",
            "  3. 일괄처리 기술",
            "  4. 구조적 분석"
          ],
          "answer": "4",
          "explanation": "구조적 기법에는 구조적 분석이 포함됩니다.",
          "subject": "소프트웨어개발"
        },
        {
          "question": "모듈 F에서의 fan-in과 fan-out의 수를 결정하는 요인으로 옳은 것은?",
          "options": [
            "  1. 모듈의 크기",
            "  2. 모듈의 복잡도",
            "  3. 모듈 간의 연결 구조",
            "  4. 모듈의 재사용성"
          ],
          "answer": "3",
          "explanation": "모듈 간의 연결 구조가 fan-in과 fan-out을 결정하는 요인입니다.",
          "subject": "소프트웨어개발"
        },
        {
          "question": "소프트웨어 생명 주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?",
          "options": [
            "  1. 정의 단계",
            "  2. 개발 단계",
            "  3. 유지보수 단계",
            "  4. 설계 단계"
          ],
          "answer": "3",
          "explanation": "유지보수 단계는 소프트웨어 생명 주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계입니다.",
          "subject": "소프트웨어개발"
        },
        {
          "question": "소프트웨어의 특징으로 옳은 것은?",
          "options": [
            "  1. 입력, 처리, 출력으로 구성된다.",
            "  2. 프로그램의 수행에 필요한 절차, 규칙, 관련 문서 등을 총칭한다.",
            "  3. 소프트웨어는 유형의 자산이다.",
            "  4. 소프트웨어는 하드웨어의 일부이다."
          ],
          "answer": "2",
          "explanation": "소프트웨어의 특징 중 하나는 프로그램의 수행에 필요한 절차, 규칙, 관련 문서 등을 총칭한다는 것입니다.",
          "subject": "소프트웨어개발"
        },
        {
          "question": "소프트웨어 생명주기 모형 중 폭포수 모형에 대한 설명으로 옳은 것은?",
          "options": [
            "  1. 각 단계가 끝난 후 결과물이 명확히 나와야 함",
            "  2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 용이함",
            "  3. 모형의 적용 경험과 성공 사례가 많음",
            "  4. 단계별로 오류 없이 다음 단계로 진행해야 하는데 현실적으로 오류가 많음"
          ],
          "answer": "1",
          "explanation": "폭포수 모형은 각 단계가 끝난 후 결과물이 명확히 나와야 함",
          "subject": "소프트웨어개발"
        },
        {
          "question": "다음 중 소프트웨어 아키텍처의 파이프 필터 형태에 대한 설명으로 옳은 것은?",
          "options": [
            "  1. 노드와 간선으로 구성된다.",
            "  2. 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.",
            "  3. 계층 모델이라고도 한다.",
            "  4. 3개의 서브시스템(모델, 뷰, 제어)으로 구성되어 있다."
          ],
          "answer": "2",
          "explanation": "파이프 필터 형태는 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.",
          "subject": "소프트웨어개발"
        }
      ],
      "status": "SUCCESS"
    }
  },
  "all_questions": [
    {
      "question": "객체 지향 소프트웨어 공학에서 하나 이상의 유사한 객체들을 묶어서 하나의 공통된 특성을 표현한 것은?",
      "options": [
        "  1. 클래스",
        "  2. 시퀀스",
        "  3. 서브루틴",
        "  4. 설계 원칙"
      ],
      "answer": "1",
      "explanation": "클래스는 유사한 객체들을 묶어서 하나의 공통된 특성을 표현한 개념입니다.",
      "subject": "소프트웨어설계"
    },
    {
      "question": "UI 설계 원칙에서 누구나 쉽게 이해하고 사용할 수 있어야 한다는 것은?",
      "options": [
        "  1. 유효성",
        "  2. 직관성",
        "  3. 무결성",
        "  4. 유연성"
      ],
      "answer": "2",
      "explanation": "직관성은 사용자가 쉽게 이해하고 사용할 수 있는 사용자 인터페이스를 의미합니다.",
      "subject": "소프트웨어설계"
    },
    {
      "question": "대표적으로 DOS, UNIX 등 운영체제에서 조작을 위해 사용하던 것으로 정해진 명령 문자열을 입력하여 시스템을 조작하는 사용자 인터페이스는?",
      "options": [
        "  1. GUI",
        "  2. CLI",
        "  3. CUI",
        "  4. MUI"
      ],
      "answer": "2",
      "explanation": "CLI는 명령 줄 인터페이스로, 사용자가 명령어를 입력하여 시스템을 조작하는 인터페이스입니다.",
      "subject": "소프트웨어설계"
    },
    {
      "question": "다음 중 애자일 소프트웨어 개발에 대한 설명으로 틀린 것은?",
      "options": [
        "  1. 공정과 도구보다 개인과의 상호작용을 더 가치 있게 여긴다.",
        "  2. 동작하는 소프트웨어보다는 포괄적인 문서를 가치 있게 여긴다.",
        "  3. 계약 협상보다는 고객과의 협력을 가치 있게 여긴다.",
        "  4. 계획을 따르기보다 변화에 대응하기를 가치 있게 여긴다."
      ],
      "answer": "2",
      "explanation": "애자일 소프트웨어 개발에서는 동작하는 소프트웨어를 문서보다 가치 있게 여깁니다.",
      "subject": "소프트웨어설계"
    },
    {
      "question": "GoF(Gang of Four) 디자인 패턴을 생성, 구조, 행동 패턴의 세 그룹으로 분류할 때 구조 패턴이 아닌 것은?",
      "options": [
        "  1. Adapter 패턴",
        "  2. Bridge 패턴",
        "  3. Builder 패턴",
        "  4. Proxy 패턴"
      ],
      "answer": "3",
      "explanation": "Builder 패턴은 생성 패턴에 속합니다.",
      "subject": "소프트웨어설계"
    },
    {
      "question": "코드 설계에서 일정한 일련번호를 부여하는 방식의 코드는?",
      "options": [
        "  1. 연상 코드",
        "  2. 블록 코드",
        "  3. 순차 코드",
        "  4. 표의 숫자 코드"
      ],
      "answer": "3",
      "explanation": "순차 코드는 일정한 일련번호를 부여하는 방식의 코드입니다.",
      "subject": "소프트웨어설계"
    },
    {
      "question": "입력되는 데이터를 컴퓨터의 프로세서가 처리하기 전에 미리 처리하여 프로세서가 처리하는 시간을 줄여주는 프로그램이나 하드웨어를 말하는 것은?",
      "options": [
        "  1. EAI",
        "  2. FEP",
        "  3. GPL",
        "  4. Duplexing"
      ],
      "answer": "2",
      "explanation": "FEP는 전처리기로, 입력 데이터를 미리 처리하여 프로세서의 부하를 줄여줍니다.",
      "subject": "소프트웨어설계"
    },
    {
      "question": "소프트웨어 아키텍처와 관련한 설명으로 틀린 것은?",
      "options": [
        "  1. 파이프 필터 아키텍처에서 데이터는 파이프를 통해 양방향으로 흐르며 필터 이동 시 오버헤드가 발생하지 않는다.",
        "  2. 외부에서 인식할 수 있는 특성이 담긴 소프트웨어의 골격이 되는 기본 구조로 볼 수 있다.",
        "  3. 데이터 중심 아키텍처는 공유 데이터에 접근하는 여러 컴포넌트를 두어 데이터의 일관성을 유지한다."
      ],
      "answer": "1",
      "explanation": "파이프 필터 아키텍처에서 데이터는 단방향으로 흐르며, 필터 이동 시 오버헤드가 발생할 수 있습니다.",
      "subject": "소프트웨어설계"
    },
    {
      "question": "UML의 구성 요소에는 사물(Things), 관계(Relationships), 다이어그램 등이 포함된다. UML의 기본 구성 요소 중 사물에 포함되지 않는 것은?",
      "options": [
        "  1. 클래스",
        "  2. 객체",
        "  3. 용례",
        "  4. 패키지"
      ],
      "answer": "4",
      "explanation": "패키지는 사물과 관계를 구성하는 요소 중 하나가 아닌, 사물을 그룹화하는 개념입니다.",
      "subject": "소프트웨어설계"
    },
    {
      "question": "정보공학 방법론에서 데이터베이스 설계의 표현으로 사용하는 모델링 언어는?",
      "options": [
        "  1. Package Diagram",
        "  2. State Transition Diagram",
        "  3. Deployment Diagram",
        "  4. ER Diagram"
      ],
      "answer": "4",
      "explanation": "ER Diagram은 데이터베이스 설계에 사용되는 모델링 언어입니다.",
      "subject": "소프트웨어설계"
    },
    {
      "question": "객체지향 분석 방법론 중 다이어그램을 사용하여 객체의 행위를 모델링하며 객체 식별, 구조 식별, 주체 정의, 속성 및 관계 정의, 서비스 정의 등의 과정으로 구성되는 것은?",
      "options": [
        "  1. Coad & Yourdon 방법",
        "  2. Booch 방법",
        "  3. Jacobson 방법",
        "  4. Wirfs-Brocks 방법"
      ],
      "answer": "1",
      "explanation": "Coad & Yourdon 방법은 객체 식별, 구조 식별, 주체 정의, 속성 및 관계 정의, 서비스 정의 등의 과정으로 구성됩니다.",
      "subject": "소프트웨어설계"
    },
    {
      "question": "트랜잭션이 올바르게 처리되고 있는지 데이터를 감시하고 제어하는 미들웨어는?",
      "options": [
        "  1. RPC",
        "  2. ORB",
        "  3. TP monitor",
        "  4. HUB"
      ],
      "answer": "3",
      "explanation": "TP monitor는 트랜잭션을 감시하고 제어하는 미들웨어입니다.",
      "subject": "소프트웨어설계"
    },
    {
      "question": "소프트웨어 생명 주기의 정의 단계에서 주로 수행하는 활동은 무엇입니까?",
      "options": [
        "  1. 타당성 검토",
        "  2. 요구 사항 분석",
        "  3. 설계",
        "  4. 구현"
      ],
      "answer": "2",
      "explanation": "정의 단계에서는 '무엇'을 처리하는 소프트웨어를 개발할 것인지 정의하며, 요구 사항 분석이 주요 활동입니다.",
      "subject": "소프트웨어개발"
    },
    {
      "question": "소프트웨어 생명 주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은?",
      "options": [
        "  1. 선형 순차적 모형",
        "  2. 각 단계가 끝난 후 결과물이 명확히 나와야 함",
        "  3. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어려움",
        "  4. 사용자가 모든 요구사항들을 명확하게 제시할 필요 없음"
      ],
      "answer": "4",
      "explanation": "폭포수 모형은 사용자가 모든 요구사항들을 명확하게 제시해야 합니다.",
      "subject": "소프트웨어개발"
    },
    {
      "question": "파이프 필터 형태의 소프트웨어 아키텍처에 대한 설명으로 옳은 것은?",
      "options": [
        "  1. 노드와 간선으로 구성된다.",
        "  2. 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.",
        "  3. 계층 모델이라고도 한다.",
        "  4. 3개의 서브시스템(모델, 뷰, 제어)으로 구성되어 있다."
      ],
      "answer": "2",
      "explanation": "파이프 필터 형태의 소프트웨어 아키텍처는 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복합니다.",
      "subject": "소프트웨어개발"
    },
    {
      "question": "DOS 및 Unix 등의 운영체제에서 조작을 위해 사용하던 것으로, 정해진 명령 문자열을 입력하여 시스템을 조작하는 사용자 인터페이스는?",
      "options": [
        "  1. GUI(Graphical User Interface)",
        "  2. CLI(Command Line Interface)",
        "  3. CUI(Cell User Interface)",
        "  4. MUI(Mobile User Interface)"
      ],
      "answer": "2",
      "explanation": "CLI는 명령 문자열을 입력하여 시스템을 조작하는 사용자 인터페이스입니다.",
      "subject": "소프트웨어개발"
    },
    {
      "question": "UML에서 시퀀스 다이어그램의 구성 항목에 해당하지 않는 것은?",
      "options": [
        "  1. 생명선",
        "  2. 실행",
        "  3. 확장",
        "  4. 메시지"
      ],
      "answer": "3",
      "explanation": "시퀀스 다이어그램의 구성 항목에는 생명선, 실행, 메시지가 포함되지만 확장은 포함되지 않습니다.",
      "subject": "소프트웨어개발"
    },
    {
      "question": "다음 중 상태 다이어그램에서 객체 전이의 요인이 되는 요소는?",
      "options": [
        "  1. event",
        "  2. state",
        "  3. message",
        "  4. transition"
      ],
      "answer": "1",
      "explanation": "상태 다이어그램에서 객체 전이의 요인이 되는 요소는 event입니다.",
      "subject": "소프트웨어개발"
    },
    {
      "question": "소프트웨어 공학에서 구조적 기법에 해당하는 것은?",
      "options": [
        "  1. 프로토타이핑 기술",
        "  2. 정보 저장소 기술",
        "  3. 일괄처리 기술",
        "  4. 구조적 분석"
      ],
      "answer": "4",
      "explanation": "구조적 기법에는 구조적 분석이 포함됩니다.",
      "subject": "소프트웨어개발"
    },
    {
      "question": "모듈 F에서의 fan-in과 fan-out의 수를 결정하는 요인으로 옳은 것은?",
      "options": [
        "  1. 모듈의 크기",
        "  2. 모듈의 복잡도",
        "  3. 모듈 간의 연결 구조",
        "  4. 모듈의 재사용성"
      ],
      "answer": "3",
      "explanation": "모듈 간의 연결 구조가 fan-in과 fan-out을 결정하는 요인입니다.",
      "subject": "소프트웨어개발"
    },
    {
      "question": "소프트웨어 생명 주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계는?",
      "options": [
        "  1. 정의 단계",
        "  2. 개발 단계",
        "  3. 유지보수 단계",
        "  4. 설계 단계"
      ],
      "answer": "3",
      "explanation": "유지보수 단계는 소프트웨어 생명 주기 단계 중에서 시간과 비용이 가장 많이 요구되는 단계입니다.",
      "subject": "소프트웨어개발"
    },
    {
      "question": "소프트웨어의 특징으로 옳은 것은?",
      "options": [
        "  1. 입력, 처리, 출력으로 구성된다.",
        "  2. 프로그램의 수행에 필요한 절차, 규칙, 관련 문서 등을 총칭한다.",
        "  3. 소프트웨어는 유형의 자산이다.",
        "  4. 소프트웨어는 하드웨어의 일부이다."
      ],
      "answer": "2",
      "explanation": "소프트웨어의 특징 중 하나는 프로그램의 수행에 필요한 절차, 규칙, 관련 문서 등을 총칭한다는 것입니다.",
      "subject": "소프트웨어개발"
    },
    {
      "question": "소프트웨어 생명주기 모형 중 폭포수 모형에 대한 설명으로 옳은 것은?",
      "options": [
        "  1. 각 단계가 끝난 후 결과물이 명확히 나와야 함",
        "  2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 용이함",
        "  3. 모형의 적용 경험과 성공 사례가 많음",
        "  4. 단계별로 오류 없이 다음 단계로 진행해야 하는데 현실적으로 오류가 많음"
      ],
      "answer": "1",
      "explanation": "폭포수 모형은 각 단계가 끝난 후 결과물이 명확히 나와야 함",
      "subject": "소프트웨어개발"
    },
    {
      "question": "다음 중 소프트웨어 아키텍처의 파이프 필터 형태에 대한 설명으로 옳은 것은?",
      "options": [
        "  1. 노드와 간선으로 구성된다.",
        "  2. 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.",
        "  3. 계층 모델이라고도 한다.",
        "  4. 3개의 서브시스템(모델, 뷰, 제어)으로 구성되어 있다."
      ],
      "answer": "2",
      "explanation": "파이프 필터 형태는 서브시스템이 입력 데이터를 받아 처리하고 결과를 다음 서브시스템으로 넘겨주는 과정을 반복한다.",
      "subject": "소프트웨어개발"
    }
  ],
  "generation_summary": {
    "target_total": 24,
    "actual_total": 24,
    "success_rate": "100.0%",
    "successful_subjects": 2,
    "failed_subjects": 0,
    "completion_status": "COMPLETE",
    "generation_time": "11.4초"
  },
  "failed_subjects": [],
  "model_info": "Groq llama-4-scout-17b-16e-instruct",
  "parallel_agents": 2
}