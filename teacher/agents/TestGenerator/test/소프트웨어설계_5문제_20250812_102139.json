{
  "subject_area": "소프트웨어설계",
  "difficulty": "중급",
  "requested_count": 5,
  "quiz_count": 5,
  "questions": [
    {
      "question": "소프트웨어 아키텍처의 정의로 가장 적절한 것은 무엇인가?",
      "options": [
        "  1. 소프트웨어의 내부 구조 및 동적 행위들을 정의하는 것",
        "  2. 소프트웨어의 요구사항을 분석하는 것",
        "  3. 소프트웨어의 구현을 담당하는 것",
        "  4. 소프트웨어의 테스트를 담당하는 것"
      ],
      "answer": "1",
      "explanation": "소프트웨어 아키텍처는 소프트웨어의 내부 구조 및 동적 행위들을 정의하는 것이다.",
      "subject": "소프트웨어설계"
    },
    {
      "question": "소프트웨어 생명주기 모형 중 폭포수 모형의 특징으로 옳지 않은 것은 무엇인가?",
      "options": [
        "  1. 각 단계가 끝난 후 결과물이 명확히 나와야 함",
        "  2. 개발 과정 중에 발생하는 새로운 요구나 경험을 설계에 반영하기 어려움",
        "  3. 단계별 정의가 분명하고, 전체 공조의 이해가 용이",
        "  4. 사용자들이 모든 요구사항들을 명확하게 제시할 필요 없음"
      ],
      "answer": "4",
      "explanation": "폭포수 모형은 사용자가 모든 요구사항을 명확하게 제시해야 한다.",
      "subject": "소프트웨어설계"
    },
    {
      "question": "구조적 방법론의 단계로 옳은 것은 무엇인가?",
      "options": [
        "  1. 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍",
        "  2. 요구사항 분석, 구조적 설계, 구조적 프로그래밍",
        "  3. 구조적 분석, 구조적 설계, 구조적 프로그래밍",
        "  4. 요구사항 분석, 구조적 분석, 구조적 프로그래밍"
      ],
      "answer": "1",
      "explanation": "구조적 방법론은 요구사항 분석, 구조적 분석, 구조적 설계, 구조적 프로그래밍 단계로 구성된다.",
      "subject": "소프트웨어설계"
    },
    {
      "question": "소프트웨어 아키텍처의 특징으로 옳은 것은 무엇인가?",
      "options": [
        "  1. 정보은닉의 원칙 적용, 높은 이식성을 가진다.",
        "  2. 추가적인 실행 시 오버헤드가 발생하지 않는다.",
        "  3. 계층적으로 조직화할 수 있는 서비스로 구성되지 않는다.",
        "  4. 핵심 기능과 데이터만 사용자에게 정보를 표시한다."
      ],
      "answer": "1",
      "explanation": "소프트웨어 아키텍처의 특징 중 하나는 정보은닉의 원칙 적용, 높은 이식성을 가진다.",
      "subject": "소프트웨어설계"
    },
    {
      "question": "소프트웨어 아키텍처의 정의로 가장 적절한 것은 무엇입니까?",
      "options": [
        "  1. 소프트웨어의 내부 구조 및 동적 행위들을 정의하는 것",
        "  2. 소프트웨어의 요구사항을 분석하는 것",
        "  3. 소프트웨어의 구현을 담당하는 것",
        "  4. 소프트웨어의 테스트를 담당하는 것"
      ],
      "answer": "1",
      "explanation": "소프트웨어 아키텍처는 소프트웨어의 내부 구조 및 동적 행위들을 정의하는 것입니다.",
      "subject": "소프트웨어설계"
    }
  ],
  "status": "SUCCESS"
}