validated,faithfulness,answer_relevancy,f_min,a_min,f_min_eff,a_min_eff,question_snippet,options_count,generated_answer,generated_subject,explanation_snippet,contexts_count,contexts_preview
PASS,0.5500946000415478,0.7999096409551268,0.7,0.6,0.28,0.32,XP(eXtreme Programming) 에 대한 설명으로 옳지 않은 것은 ?,4,4,소프트웨어 설계,"XP(eXtreme Programming)는 고객의 요구사항 변화에 빠르게 대응하기 위해 개발 과정의 반복을 극대화하여 생산성을 향상하는 방법론입니다. XP의 핵심 가치에는 소통, 단순성, 피드백, 용기, 존중이 있습니다. XP의 주요 실천 방법에는 Pair Programming, Collective Ownership, Test-Driven Development, Continuous Integration, Whole Team, Small Releases 등이 있습니다.

옵션 1, 2, 3은 XP의 주요 실천 방법과 일치합니다. 릴",2,[유사문제 1] || 과목: 소프트웨어 설계
PASS,0.6848577694081279,0.7595788535909079,0.7,0.6,0.28,0.32,XP(eXtreme Programming) 에 대한 설명으로 옳지 않은 것은 ?,4,** 4,** 소프트웨어설계 (XP는 소프트웨어 설계·개발 방법론에 속한다),"**  
XP(eXtreme Programming)는 애자일 방법론 중 하나로, 짧은 반복 주기의 **Small Release**(옵션 1), **Continuous Integration**(옵션 2), **Test‑Driven Development**과 자동화 테스트 도구 활용(옵션 3) 등을 핵심 실천으로 삼는다. 또한 **Collective Ownership**(공동 코드 소유)와 **Whole Team**(전체 팀) 개념을 통해 모든 팀원이 코드와 결과물에 대한 책임을 공유한다.  

따라서  

- **①** “릴리즈 기간",2,[유사문제 1] || 과목: 소프트웨어 설계
PASS,0.5706308577575746,0.7017808506799025,0.7,0.6,0.28,0.32,자료 흐름도 (Data Flow Diagram) 의 구성 요소로 옳은 것은 ?,4,** 2,** 소프트웨어설계 (DFD는 시스템 분석·설계 단계에서 사용되는 주요 기법이므로),"**  
자료 흐름도(DFD)는 시스템의 데이터 흐름과 변환 과정을 시각적으로 표현하는 도구이며, 기본적으로 네 가지 구성 요소만을 사용한다.

1. **Process (프로세스)** – 데이터를 변환·처리하는 시스템의 기능을 나타낸다.  
2. **Data Flow (자료 흐름)** – 프로세스 간 혹은 외부와 시스템 사이에 데이터가 이동하는 경로를 화살표로 표시한다.  
3. **Data Store (자료 저장소)** – 시스템 내부에 영구적으로 저장되는 파일, 데이터베이스 등을 사각형(또는 열린 사각형)으로 나타낸다.  
4.",2,[유사문제 1] || 과목: 소프트웨어 설계
PASS,0.6875761640231189,0.908911574411271,0.7,0.6,0.28,0.32,분산 시스템에서의 미들웨어 (Middleware) 와 관련한 설명으로 틀린 것은?,4,** 4,** 소프트웨어설계 (미들웨어는 분산 환경에서 소프트웨어 설계·구조와 직접 연관된 개념이므로),"**  
미들웨어(Middleware)는 분산 시스템에서 **운영체제와 응용 프로그램, 혹은 서버와 클라이언트 사이**에 위치하여 다양한 공통 서비스를 제공하는 소프트웨어이다.  

1. **“분산 시스템에서 다양한 부분을 관리하고 통신하며 데이터를 교환하게 해주는 소프트웨어”** – 맞다. 미들웨어는 통신, 데이터 교환, 트랜잭션 관리 등 시스템 전반을 지원한다.  
2. **“위치 투명성(Location Transparency)을 제공한다.”** – 맞다. 미들웨어는 객체·서비스가 물리적으로 어디에 있든 동일하게 접근할 수 있게",2,[유사문제 1] || 과목: 소프트웨어 설계
PASS,0.6323906776275635,0.8474290812322091,0.7,0.6,0.28,0.32,디자인 패턴 사용의 장٠단점에 대한 설명으로 거리가 먼 것은?,4,** 4,** 소프트웨어설계,"**  
디자인 패턴은 객체지향 설계·구현을 기반으로 한 재사용 가능한 설계 템플릿이다.  
- **①** “소프트웨어 구조 파악이 용이하다” – 디자인 패턴을 적용하면 코드 구조가 표준화돼 전체 흐름을 이해하기 쉬워진다.  
- **②** “객체지향 설계 및 구현의 생산성을 높이는데 적합하다” – 패턴은 검증된 설계 방식을 제공하므로 설계·구현 단계에서 생산성을 높인다.  
- **③** “재사용을 위한 개발 시간이 단축된다” – 기존에 검증된 패턴을 재사용함으로써 새로 구현하는 시간을 절감한다.  
- **④** “절차형 언어와",2,[유사문제 1] || 과목: 소프트웨어 설계
PASS,0.7149072785114957,0.6714350556247216,0.7,0.6,0.28,0.32,형상 관리 도구의 주요 기능으로 거리가 먼 것은 ?,4,1,소프트웨어개발,"형상 관리 도구는 소스 코드·문서·빌드 등 소프트웨어 자산의 버전을 관리하고, 변경 이력을 추적하며, 체크인·체크아웃·커밋과 같은 작업을 통해 변경을 통제하는 것이 주요 기능이다. ‘정규화(Normalization)’는 데이터베이스 설계 시 테이블을 정규형으로 변환하여 중복을 최소화하고 무결성을 확보하는 기법으로, 형상 관리와는 전혀 관련이 없는 개념이다. 따라서 보기 중 형상 관리 도구의 주요 기능과 거리가 먼 것은 ‘정규화’이며, 이는 1번에 해당한다.  

과목: 소프트웨어개발",2,[유사문제 1] || 과목: 소프트웨어 개발
PASS,0.578978240428525,0.8199404457210632,0.7,0.6,0.28,0.32,XP(eXtreme Programming) 에 대한 설명으로 옳지 않은 것은 ?,4,** 4,** 소프트웨어설계,"**  
XP(eXtreme Programming)는 애자일 방법론 중 하나로, 짧은 반복 주기와 고객과의 지속적인 협업을 통해 변화에 빠르게 대응하는 것을 목표로 합니다. 주요 실천 방법으로는  

1. **짧은 릴리즈 주기** – 작은 기능 단위로 자주 배포해 고객 피드백을 즉시 반영한다.  
2. **지속적인 통합(Continuous Integration)** – 작업이 끝날 때마다 코드를 바로 통합해 빌드·테스트를 수행한다.  
3. **테스트 자동화** – 테스트 주도 개발(TDD)과 자동화된 테스트 도구를 활용해 테스트를",2,[유사문제 1] || 과목: 소프트웨어 설계
PASS,0.6506936851948055,0.7674279101413342,0.7,0.6,0.28,0.32,자료 흐름도 (Data Flow Diagram) 의 구성 요소로 옳은 것은 ?,4,** 2,** 소프트웨어설계 (DFD는 시스템 분석·설계 단계에서 사용되는 대표적인 설계 도구이기 때문),"**  
자료 흐름도(Data Flow Diagram, DFD)는 시스템의 기능과 데이터 흐름을 시각적으로 표현하는 기법으로, 다음 네 가지 기본 요소로 구성됩니다.

1. **Process(프로세스)** – 데이터를 변환·처리하는 시스템의 기능을 나타냅니다. 원(또는 둥근 사각형) 안에 이름을 적어 표시합니다.  
2. **Data Flow(자료 흐름)** – 프로세스 간 혹은 외부와 시스템 사이에 데이터가 이동하는 경로를 화살표로 나타냅니다. 화살표 위에 데이터 이름을 적습니다.  
3. **Data Store(자료 저장소)**",2,[유사문제 1] || 과목: 소프트웨어 설계
PASS,0.6022336287200681,0.8138996810306609,0.7,0.6,0.28,0.32,XP(eXtreme Programming) 에 대한 설명으로 옳지 않은 것은 ?,4,** 4,** 소프트웨어설계 (XP는 소프트웨어 설계·개발 방법론에 해당),"**  
XP(eXtreme Programming)는 애자일 개발 방법론 중 하나로, 짧은 반복 주기의 **Small Release**, **Continuous Integration**, **Test‑Driven Development**, **Pair Programming**, **Collective Ownership** 등 팀 전체가 책임을 공유하며 개발에 참여하는 것이 핵심이다.  

- **①** “릴리즈 기간을 짧게 반복하여 고객의 요구 변화에 빠르게 대응한다.” → XP는 짧은 스프린트(소규모 릴리즈)를 통해 고객 피드백을",2,[유사문제 1] || 과목: 소프트웨어 설계
PASS,0.5518869844335826,0.6852493600394011,0.7,0.6,0.28,0.32,자료 흐름도 (Data Flow Diagram) 의 구성 요소로 옳은 것은 ?,4,2,소프트웨어설계   (DFD는 소프트웨어 설계·분석 단계에서 사용되는 모델링 기법),"자료 흐름도(DFD)는 시스템의 데이터 흐름과 변환 과정을 시각적으로 표현하기 위해 네 가지 기본 기호만을 사용한다.  
1) **Process(프로세스)** – 데이터를 변환·처리하는 시스템의 기능을 원이나 둥근 사각형으로 표시한다.  
2) **Data Flow(자료 흐름)** – 데이터가 이동하는 경로를 화살표로 나타낸다.  
3) **Data Store(자료 저장소)** – 시스템 내부에 영구적으로 저장되는 파일·데이터베이스 등을 열린 사각형(또는 두 개의 평행선)으로 표시한다.  
4) **Terminator(단말, 외부 ",2,[유사문제 1] || 과목: 소프트웨어 설계
PASS,0.7116719610526535,0.9153698066215685,0.7,0.6,0.28,0.32,분산 시스템에서의 미들웨어 (Middleware) 와 관련한 설명으로 틀린 것은?,4,4,**소프트웨어설계** (미들웨어는 분산 시스템 설계·구조와 관련된 소프트웨어 설계 영역에 해당한다).,"1. **‘분산 시스템에서 다양한 부분을 관리하고 통신하며 데이터를 교환하게 해주는 소프트웨어로 볼 수 있다.’**  
   - 미들웨어는 분산 환경에서 서로 다른 시스템·프로세스·컴포넌트 간의 통신, 데이터 교환, 자원 관리 등을 담당하는 소프트웨어이다. 따라서 이 설명은 옳다.  

2. **‘위치 투명성 (Location Transparency)을 제공한다.’**  
   - 미들웨어는 클라이언트가 서버(또는 다른 서비스)의 물리적 위치를 알 필요 없이 서비스를 이용할 수 있게 해 주며, 이는 위치 투명성의 핵심 개념이다. 따",2,[유사문제 1] || 과목: 소프트웨어 설계
PASS,0.6636582387366193,0.8703393005674088,0.7,0.6,0.28,0.32,디자인 패턴 사용의 장٠단점에 대한 설명으로 거리가 먼 것은?,4,** 4,** 소프트웨어설계,"**  
디자인 패턴은 객체지향 설계·구현을 기반으로 한 재사용 가능한 설계 템플릿이다.  
요약된 내용에서 디자인 패턴의 장점으로는  

- 소프트웨어 구조 파악이 쉽다.  
- 객체지향 설계·구현의 생산성을 높인다.  
- 검증된 구조를 재사용해 개발 시간·비용을 절감한다.  

등이 제시되고 있다.  

반면 단점으로는 “객체지향 설계/구현 위주로 사용된다”, “초기 투자 비용이 부담된다” 등이 언급된다. 즉, 절차형 언어와 결합했을 때 효율이 극대화된다는 설명은 디자인 패턴의 특성과 전혀 맞지 않는다. 절차형 언어는 객체지향",2,[유사문제 1] || 과목: 소프트웨어 설계
PASS,0.6816112054242687,0.7155044268042997,0.7,0.6,0.28,0.32,형상 관리 도구의 주요 기능으로 거리가 먼 것은 ?,4,1,**소프트웨어개발** (형상 관리·버전 관리 등은 소프트웨어 개발 과정에서 다루는 핵심 관리 기법이므로),"형상 관리(Configuration Management) 도구는 소스 코드·문서·빌드 결과물 등의 형상 항목을 식별·버전 관리·변경 통제·감사·기록 등의 작업을 수행한다. 주요 기능으로는  
- **체크인(Check‑in)** : 수정된 파일을 저장소에 반영  
- **체크아웃(Check‑out)** : 저장소에서 파일을 가져와 작업  
- **커밋(commit)** : 로컬에서 수행한 변경을 중앙 저장소에 적용  

이들 모두 형상 관리 도구가 제공하는 버전 관리·변경 관리 기능에 해당한다.  

반면 **정규화(Normaliza",2,[유사문제 1] || 과목: 소프트웨어 개발
PASS,0.6911199292524811,0.8716431746251249,0.7,0.6,0.28,0.32,패키지 소프트웨어의 일반적인 제품 품질 요구사항 및 테스트를 위한 국제 표준은?,4,** 3,** 정보시스템구축관리,"**  
패키지 소프트웨어(완제품 소프트웨어)의 품질 요구사항과 이를 검증하기 위한 테스트 절차를 국제적으로 규정한 표준은 **ISO/IEC 12119**이다.  
- ISO/IEC 12119은 “Software product quality requirements and evaluation (SPQRE) – Part 1: General requirements” 라는 공식 명칭을 가지고 있으며, 소프트웨어 제품이 만족해야 할 일반적인 품질 요구사항과 그 평가·시험 방법을 제시한다.  
- 제시된 다른 선택지들은 각각 다른 분야의 표준",2,[유사문제 1] || 과목: 정보처리 시스템 구축 관리
PASS,0.680227491940948,0.8075066203511627,0.7,0.6,0.28,0.32,블랙박스 테스트 기법으로 거리가 먼 것은 ?,4,1,소프트웨어개발,"블랙박스 테스트는 프로그램 내부 구조를 보지 않고 입력과 출력만을 기준으로 테스트 케이스를 설계하는 방법이다. 대표적인 블랙박스 기법으로는  

* **동치 클래스 분해**(Equivalence Class Partitioning) – 입력값을 동등한 클래스별로 나누어 대표값을 테스트한다.  
* **경계값 분석**(Boundary Value Analysis) – 입력 조건의 경계값에서 오류가 발생하기 쉬우므로 경계값을 중심으로 테스트한다.  
* **원인‑결과 그래프**(Cause‑Effect Graphing) – 입력(원인)과 출",2,[유사문제 1] || 과목: 소프트웨어 개발
PASS,0.6488667322428155,0.7315364418957094,0.7,0.6,0.28,0.32,인터페이스 구현 검증 도구가 아닌 것은 ?,4,1,소프트웨어개발,"‘인터페이스 구현 검증 도구’는 구현된 인터페이스가 설계대로 동작하는지를 자동화된 테스트를 통해 확인해 주는 도구를 의미한다. 제시된 보기들을 하나씩 살펴보면 다음과 같다.

1. **ESB (Enterprise Service Bus)** – 애플리케이션 간 메시지를 라우팅·변환·조정하는 미들웨어이며, 인터페이스 구현을 검증하는 테스트 프레임워크가 아니다. 따라서 ‘검증 도구’에 해당하지 않는다.  
2. **xUnit** – JUnit, NUnit 등 다양한 언어에 적용되는 단위·통합 테스트 프레임워크로, 인터페이스 구현 검증에 ",2,[유사문제 1] || 과목: 소프트웨어 개발
PASS,0.6712167914278009,0.5721285940529635,0.7,0.6,0.28,0.32,다음에서 설명하는 스키마 (Schema) 는 ?,4,** 1 (개념 스키마),** 데이터베이스 구축,"**  
스키마는 데이터베이스 구조를 정의하는 청사진을 의미한다.  
- **외부 스키마**는 특정 사용자(또는 응용 프로그램)가 보는 데이터베이스의 부분적인 뷰이며, 사용자의 요구에 맞춘 제한된 구조를 제공한다.  
- **내부 스키마**는 데이터가 실제 물리적 저장 장치에 어떻게 저장되고 접근되는지를 정의하는 물리적 구조를 나타낸다.  
- **내용(내용) 스키마**는 일반적인 데이터베이스 교과서에서 다루는 용어가 아니며, 보통 사용되지 않는다.  
- **개념 스키마**는 데이터베이스 전체의 논리적 구조를 정의한다. 이는 **",2,[유사문제 1] || 과목: 소프트웨어 설계
PASS,0.716013653326173,0.8282121014969905,0.7,0.6,0.28,0.32,"조건을 만족하는 릴레이션의 수평적 부분집합으로 구성하며 , 연산자의 기호는 그리스 문자 시그마 ( σ ) 를 사용하는 관계대수 연산은 ?",4,1,데이터베이스 구축,"관계대수에서 **수평적** 연산은 릴레이션의 **행(튜플)**을 기준으로 조건을 적용하여 부분집합을 만드는 연산이다.  
조건을 만족하는 튜플만을 선택해 새로운 릴레이션을 만들며, 이 연산의 기호는 그리스 문자 **시그마(σ)** 로 표기한다.  
이는 전형적인 **Select(σ)** 연산의 정의와 일치한다.  

- **Select(σ)**: “조건을 만족하는 튜플의 부분집합을 구하여 새로운 릴레이션을 만든다.” → 수평적 연산, 기호 σ.  
- **Project(π)**: 열(속성)만을 추출하는 수직 연산, 기호 π.  
-",2,[유사문제 1] || 과목: 데이터베이스 구축
PASS,0.7491878018966266,0.7856740371738581,0.7,0.6,0.28,0.32,"데이터베이스 설계 단계 중 저장 레코드 양식 설계 , 레코드 집중의 분석 및 설계 , 접근 경로 설계와 관계되는 것은 ?",4,** 4,** 데이터베이스 구축 (데이터베이스 설계·구현과 직접 관련됨),"**  
데이터베이스 설계는 일반적으로 **요구조건 분석 → 개념적 설계 → 논리적 설계 → 물리적 설계** 순으로 진행됩니다.  

- **요구조건 분석**은 사용자의 요구와 업무 흐름을 파악하는 단계이며 설계 기법과는 직접적인 연관이 없습니다.  
- **개념적 설계**는 현실 세계의 데이터를 엔터티·관계 등으로 추상화하여 **개념 스키마**를 만드는 단계입니다.  
- **논리적 설계**는 개념 스키마를 특정 DBMS가 지원하는 **논리적 스키마**(예: 관계형 테이블)로 변환하는 과정으로, 테이블 구조·키·정규화 등을 다룹니",2,[유사문제 1] || 과목: 데이터베이스 구축
PASS,0.6659354866907975,0.8319101029778811,0.7,0.6,0.28,0.32,관계형 데이터 모델의 릴레이션에 대한 설명으로 틀린 것은 ?,4,** 4,** 데이터베이스 구축 (Database Construction),"**  
관계형 데이터 모델에서 릴레이션(표)은 **수학적 집합**으로 정의됩니다. 따라서 릴레이션을 구성하는 요소들에 대해 다음과 같은 성질이 성립합니다.

1. **모든 속성 값은 원자 값을 갖는다.**  
   – 이는 제1정규형(1NF)의 정의이며, 각 셀에 원자값(분해할 수 없는 값)만이 들어가야 함을 의미합니다. 따라서 옳은 설명입니다.

2. **한 릴레이션에 포함된 튜플은 모두 상이하다.**  
   – 릴레이션은 중복된 튜플을 허용하지 않는 집합이므로, 동일한 튜플이 두 번 존재할 수 없습니다. 따라서 옳은 설명입니",2,[유사문제 1] || 과목: 데이터베이스 구축
PASS,0.7290156422496107,0.7608019220350539,0.7,0.6,0.28,0.32,다음 C 언어 프로그램이 실행되었을 때의 결과는 ?,4,** 제공된 정보만으로는 정답 번호를 결정할 수 없습니다.,** `프로그래밍언어활용` (C 언어 코드 해석·실행 결과 예측은 이 과목에 해당합니다),"**  
문제에서 “다음 C 언어 프로그램이 실행되었을 때의 결과는 ?” 라고 제시했지만, 실제 프로그램 코드가 포함되어 있지 않습니다. C 프로그램이 어떤 연산을 수행하는지, 변수들의 초기값·형태·연산자·제어문·입출력 구문 등이 명시되지 않으면 결과값을 예측할 수 없습니다.  

예를 들어, 아래와 같은 코드들은 각각 다른 결과를 출력합니다.

| 예시 코드 | 설명 | 출력값(예시) |
|----------|------|--------------|
| `int a=5, b=6; printf(""%d"", a+b);` | 두 정수의 ",2,[유사문제 1] || 과목: 소프트웨어 개발
PASS,0.6702530152159252,0.7700733398932907,0.7,0.6,0.28,0.32,"HRN 방식으로 스케줄링 할 경우 , 입력된 작업이 다음과 같을 때 처리되는 작업 순서로 옳은 것은?",4,** 1,"** 프로그래밍언어활용 (스케줄링은 운영체제·프로그램 실행 관리와 관련된 내용으로, 정보처리기사 과목 중 ‘프로그래밍언어활용’에 가장 적합)","**  
HRN(Highest Response Ratio Next) 방식은  
\[
\text{Response Ratio} = \frac{\text{Waiting Time} + \text{Service Time}}{\text{Service Time}}
\]  
가 가장 큰 작업을 먼저 실행한다.  

문제에 주어진 작업들의 **대기시간**은 실제 도착시간을 의미한다(즉, 작업이 시스템에 들어온 시점).  
각 작업의 서비스(실행)시간은 다음과 같다.

| 작업 | 도착(대기)시간 | 서비스시간 |
|------|-----------",2,[유사문제 1] || 과목: 프로그래밍 언어 활용
PASS,0.47531404366242364,0.8134782006425213,0.7,0.6,0.28,0.32,"C, Java 언어 등에서 사용되는 예약어로 , 반복문 안에서 이후의 문장을 실행하지 않고 제어를 반복문의 처음으로 옮기는 명령어는 무엇인가?",4,2,프로그래밍언어활용,"`continue`는 반복문(`for`, `while`, `do‑while`) 안에서 사용되는 예약어로, 현재 반복 단계에서 남아 있는 문장을 건너뛰고 바로 반복문의 조건 검사(또는 초기식) 단계로 제어를 이동시킨다. 따라서 “반복문 안에서 이후의 문장을 실행하지 않고 제어를 반복문의 처음으로 옮기는 명령어”는 `continue`가 된다. `break`는 반복문이나 `switch` 문을 완전히 빠져나가게 하고, `next`와 `release`는 C·Java 표준 예약어가 아니므로 정답이 아니다.  

과목: 프로그래밍언어활용",2,[유사문제 1] || 과목: 프로그래밍 언어 활용
PASS,0.6250419616755953,0.7731207453751227,0.7,0.6,0.28,0.32,"3 개의 페이지 프레임을 갖는 시스템에서 페이지 참조 순서가1, 2,1,0,4,1,3 일 경우 FIFO 알고리즘에 의한 페이지 교체의 경우 프레임의 최종 상태는?",4,** 4,"** 프로그래밍언어활용 (페이지 교체·페이징은 운영체제·메모리 관리 개념으로, 정보처리기사 시험에서 “프로그래밍 언어 활용” 영역에 포함됨)","**  

1. **초기 상태** – 3개의 프레임이 모두 비어 있다.  
2. **참조 1** → 페이지 부재. 빈 프레임에 1을 적재 → `[1, -, -]` (FIFO 순서: 1)  
3. **참조 2** → 페이지 부재. 빈 프레임에 2를 적재 → `[1, 2, -]` (FIFO 순서: 1, 2)  
4. **참조 1** → 이미 프레임에 존재하므로 히트, 프레임·FIFO 순서 변동 없음.  
5. **참조 0** → 페이지 부재. 빈 프레임에 0을 적재 → `[1, 2, 0]` (FIFO 순서: 1, 2, 0)  
6. *",2,[유사문제 1] || 과목: 프로그래밍 언어 활용
PASS,0.5660111318362396,0.794211546572478,0.7,0.6,0.28,0.32,XP(eXtreme Programming) 에 대한 설명으로 옳지 않은 것은 ?,4,** 4,** 소프트웨어개발 (XP는 소프트웨어 개발 방법론에 관한 내용이므로),"**  
XP(Extreme Programming)는 애자일 개발 방법론 중 하나로, 다음과 같은 핵심 실천을 강조한다.  

1. **짧은 반복(Iteration)과 짧은 릴리즈 주기** – 고객의 요구 변화에 빠르게 대응하기 위해 1~2주 정도의 짧은 사이클로 작업을 진행한다. 따라서 “릴리즈 기간을 짧게 반복하여 고객의 요구 변화에 빠르게 대응한다.”는 옳은 설명이다.  

2. **지속적인 통합(Continuous Integration)** – 개발자는 작업이 끝날 때마다 코드를 공유 저장소에 바로 통합한다. 이는 “코드들은",3,[유사문제 1] || [유사문제 2] || [유사문제 3]
PASS,0.6251355670457011,0.8407687044060559,0.7,0.6,0.28,0.32,XP(eXtreme Programming) 에 대한 설명으로 옳지 않은 것은 ?,4,4,소프트웨어개발,"XP(eXtreme Programming)는 애자일 개발 방법론 중 하나로, 다음과 같은 핵심 실천을 강조한다.  

1) **짧은 릴리즈 주기** – 짧은 반복(iteration)으로 소프트웨어를 지속적으로 배포하여 고객 요구 변화에 빠르게 대응한다. → 옳은 설명.  
2) **지속적인 통합** – 개발자는 작업이 끝날 때마다 코드를 메인 라인에 통합하고, 자동 빌드·테스트를 수행한다. → 옳은 설명.  
3) **테스트 자동화** – 테스트‑드리븐 개발(Test‑Driven Development, TDD)을 통해 테스트를 자동",3,[유사문제 1] || [유사문제 2] || [유사문제 3]
PASS,0.635205598722144,0.7755369694688249,0.7,0.6,0.28,0.32,자료 흐름도 (Data Flow Diagram) 의 구성 요소로 옳은 것은 ?,4,2,소프트웨어설계,"자료 흐름도(Data Flow Diagram, DFD)는 시스템의 기능적 흐름을 시각화하는 도구로, 기본적인 네 가지 구성 요소가 정의되어 있다.  
1) **Process(프로세스)** – 입력 데이터를 변환하여 출력 데이터를 생성하는 기능 또는 작업을 나타낸다.  
2) **Data Flow(데이터 흐름)** – 프로세스 간, 혹은 외부 엔티티와 프로세스 사이에 데이터가 이동하는 경로를 화살표로 표시한다.  
3) **Data Store(데이터 저장소)** – 시스템 내에서 데이터를 영구적으로 보관하는 저장소(파일, 데이터베이스",3,[유사문제 1] || [유사문제 2] || [유사문제 3]
